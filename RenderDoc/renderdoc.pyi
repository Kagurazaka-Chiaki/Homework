from typing import Any, ClassVar, Union

from typing import overload
import collections
import enum
import importlib._bootstrap

# typedef struct {
#     PyObject_HEAD
#     void *ptr;
#     swig_type_info *ty;
#     int own;
#     PyObject *next;
#     PyObject *dict;
# } SwigPyObject;
class SwigPyObject:
    ptr: Any
    ty: Any
    own: Any
    next: Any
    dict: Any


class APIEvent(SwigPyObject):
    NoChunk: ClassVar[int] = ...
    chunkIndex: Any
    eventId: Any
    fileOffset: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class APIProperties(SwigPyObject):
    degraded: Any
    localRenderer: Any
    pipelineType: Any
    pixelHistory: Any
    remoteReplay: Any
    rgpCapture: Any
    shaderDebugging: Any
    shadersMutable: Any
    this: Any
    thisown: Any
    vendor: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class APIUseData(SwigPyObject): # type: ignore
    name: Any
    presenting: Any
    supportMessage: Any
    supported: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ActionDescription(SwigPyObject):
    actionId: Any
    baseVertex: Any
    children: Any
    copyDestination: Any
    copyDestinationSubresource: Any
    copySource: Any
    copySourceSubresource: Any
    customName: Any
    depthOut: Any
    dispatchBase: Any
    dispatchDimension: Any
    dispatchThreadsDimension: Any
    drawIndex: Any
    eventId: Any
    events: Any
    flags: Any
    indexOffset: Any
    instanceOffset: Any
    markerColor: Any
    next: Any
    numIndices: Any
    numInstances: Any
    outputs: Any
    parent: Any
    previous: Any
    this: Any
    thisown: Any
    vertexOffset: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def GetName(self, structuredFile) -> Any: ...
    def IsFakeMarker(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ActionFlags(enum.IntFlag):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Auto: ClassVar[importlib._bootstrap.ActionFlags] = ...
    BeginPass: ClassVar[importlib._bootstrap.ActionFlags] = ...
    Clear: ClassVar[importlib._bootstrap.ActionFlags] = ... # type: ignore
    ClearColor: ClassVar[importlib._bootstrap.ActionFlags] = ...
    ClearDepthStencil: ClassVar[importlib._bootstrap.ActionFlags] = ...
    CmdList: ClassVar[importlib._bootstrap.ActionFlags] = ...
    CommandBufferBoundary: ClassVar[importlib._bootstrap.ActionFlags] = ...
    Copy: ClassVar[importlib._bootstrap.ActionFlags] = ...
    Dispatch: ClassVar[importlib._bootstrap.ActionFlags] = ...
    Drawcall: ClassVar[importlib._bootstrap.ActionFlags] = ...
    EndPass: ClassVar[importlib._bootstrap.ActionFlags] = ...
    GenMips: ClassVar[importlib._bootstrap.ActionFlags] = ...
    Indexed: ClassVar[importlib._bootstrap.ActionFlags] = ...
    Indirect: ClassVar[importlib._bootstrap.ActionFlags] = ...
    Instanced: ClassVar[importlib._bootstrap.ActionFlags] = ...
    MultiAction: ClassVar[importlib._bootstrap.ActionFlags] = ...
    NoFlags: ClassVar[importlib._bootstrap.ActionFlags] = ...
    PassBoundary: ClassVar[importlib._bootstrap.ActionFlags] = ...
    PopMarker: ClassVar[importlib._bootstrap.ActionFlags] = ...
    Present: ClassVar[importlib._bootstrap.ActionFlags] = ...
    PushMarker: ClassVar[importlib._bootstrap.ActionFlags] = ...
    Resolve: ClassVar[importlib._bootstrap.ActionFlags] = ...
    SetMarker: ClassVar[importlib._bootstrap.ActionFlags] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class AddressMode(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    ClampBorder: ClassVar[importlib._bootstrap.AddressMode] = ...
    ClampEdge: ClassVar[importlib._bootstrap.AddressMode] = ...
    Mirror: ClassVar[importlib._bootstrap.AddressMode] = ...
    MirrorClamp: ClassVar[importlib._bootstrap.AddressMode] = ...
    MirrorOnce: ClassVar[importlib._bootstrap.AddressMode] = ...
    MirrorRepeat: ClassVar[importlib._bootstrap.AddressMode] = ...
    Repeat: ClassVar[importlib._bootstrap.AddressMode] = ...
    Wrap: ClassVar[importlib._bootstrap.AddressMode] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class AlphaMapping(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    BlendToCheckerboard: ClassVar[importlib._bootstrap.AlphaMapping] = ...
    BlendToColor: ClassVar[importlib._bootstrap.AlphaMapping] = ...
    Count: ClassVar[importlib._bootstrap.AlphaMapping] = ...
    Discard: ClassVar[importlib._bootstrap.AlphaMapping] = ...
    First: ClassVar[importlib._bootstrap.AlphaMapping] = ...
    Preserve: ClassVar[importlib._bootstrap.AlphaMapping] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class AndroidFlags(enum.IntFlag):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Debuggable: ClassVar[importlib._bootstrap.AndroidFlags] = ...
    NoFlags: ClassVar[importlib._bootstrap.AndroidFlags] = ...
    RootAccess: ClassVar[importlib._bootstrap.AndroidFlags] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class AxisMapping(SwigPyObject):
    this: Any
    thisown: Any
    xAxis: Any
    yAxis: Any
    zAxis: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class BindType(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    ConstantBuffer: ClassVar[importlib._bootstrap.BindType] = ...
    ImageSampler: ClassVar[importlib._bootstrap.BindType] = ...
    InputAttachment: ClassVar[importlib._bootstrap.BindType] = ...
    ReadOnlyBuffer: ClassVar[importlib._bootstrap.BindType] = ...
    ReadOnlyImage: ClassVar[importlib._bootstrap.BindType] = ...
    ReadOnlyResource: ClassVar[importlib._bootstrap.BindType] = ...
    ReadOnlyTBuffer: ClassVar[importlib._bootstrap.BindType] = ...
    ReadWriteBuffer: ClassVar[importlib._bootstrap.BindType] = ...
    ReadWriteImage: ClassVar[importlib._bootstrap.BindType] = ...
    ReadWriteResource: ClassVar[importlib._bootstrap.BindType] = ...
    ReadWriteTBuffer: ClassVar[importlib._bootstrap.BindType] = ...
    Sampler: ClassVar[importlib._bootstrap.BindType] = ...
    Unknown: ClassVar[importlib._bootstrap.BindType] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class Bindpoint(SwigPyObject):
    arraySize: Any
    bind: Any
    bindset: Any
    this: Any
    thisown: Any
    used: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class BindpointIndex(SwigPyObject):
    arrayIndex: Any
    bind: Any
    bindset: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class BlendEquation(SwigPyObject):
    destination: Any
    operation: Any
    source: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class BlendMultiplier(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    DstAlpha: ClassVar[importlib._bootstrap.BlendMultiplier] = ...
    DstCol: ClassVar[importlib._bootstrap.BlendMultiplier] = ...
    FactorAlpha: ClassVar[importlib._bootstrap.BlendMultiplier] = ...
    FactorRGB: ClassVar[importlib._bootstrap.BlendMultiplier] = ...
    InvDstAlpha: ClassVar[importlib._bootstrap.BlendMultiplier] = ...
    InvDstCol: ClassVar[importlib._bootstrap.BlendMultiplier] = ...
    InvFactorAlpha: ClassVar[importlib._bootstrap.BlendMultiplier] = ...
    InvFactorRGB: ClassVar[importlib._bootstrap.BlendMultiplier] = ...
    InvSrc1Alpha: ClassVar[importlib._bootstrap.BlendMultiplier] = ...
    InvSrc1Col: ClassVar[importlib._bootstrap.BlendMultiplier] = ...
    InvSrcAlpha: ClassVar[importlib._bootstrap.BlendMultiplier] = ...
    InvSrcCol: ClassVar[importlib._bootstrap.BlendMultiplier] = ...
    One: ClassVar[importlib._bootstrap.BlendMultiplier] = ...
    Src1Alpha: ClassVar[importlib._bootstrap.BlendMultiplier] = ...
    Src1Col: ClassVar[importlib._bootstrap.BlendMultiplier] = ...
    SrcAlpha: ClassVar[importlib._bootstrap.BlendMultiplier] = ...
    SrcAlphaSat: ClassVar[importlib._bootstrap.BlendMultiplier] = ...
    SrcCol: ClassVar[importlib._bootstrap.BlendMultiplier] = ...
    Zero: ClassVar[importlib._bootstrap.BlendMultiplier] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class BlendOperation(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Add: ClassVar[importlib._bootstrap.BlendOperation] = ...
    Maximum: ClassVar[importlib._bootstrap.BlendOperation] = ...
    Minimum: ClassVar[importlib._bootstrap.BlendOperation] = ...
    ReversedSubtract: ClassVar[importlib._bootstrap.BlendOperation] = ...
    Subtract: ClassVar[importlib._bootstrap.BlendOperation] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class BlendStats(SwigPyObject):
    calls: Any
    nulls: Any
    redundants: Any
    sets: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class BoundCBuffer(SwigPyObject):
    byteOffset: Any
    byteSize: Any
    inlineData: Any
    resourceId: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class BoundResource(SwigPyObject):
    dynamicallyUsed: Any
    firstMip: Any
    firstSlice: Any
    resourceId: Any
    this: Any
    thisown: Any
    typeCast: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class BoundResourceArray(SwigPyObject):
    bindPoint: Any
    dynamicallyUsedCount: Any
    firstIndex: Any
    resources: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class BoundVBuffer(SwigPyObject):
    byteOffset: Any
    byteSize: Any
    byteStride: Any
    resourceId: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class BucketRecordType(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Linear: ClassVar[importlib._bootstrap.BucketRecordType] = ...
    Pow2: ClassVar[importlib._bootstrap.BucketRecordType] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class BufferCategory(enum.IntFlag):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Constants: ClassVar[importlib._bootstrap.BufferCategory] = ...
    Index: ClassVar[importlib._bootstrap.BufferCategory] = ...
    Indirect: ClassVar[importlib._bootstrap.BufferCategory] = ...
    NoFlags: ClassVar[importlib._bootstrap.BufferCategory] = ...
    ReadWrite: ClassVar[importlib._bootstrap.BufferCategory] = ...
    Vertex: ClassVar[importlib._bootstrap.BufferCategory] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class BufferDescription(SwigPyObject):
    creationFlags: Any
    gpuAddress: Any
    length: Any
    resourceId: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class BusyData(SwigPyObject):
    clientName: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class Camera(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def GetForward(self) -> Any: ...
    def GetPosition(self) -> Any: ...
    def GetRight(self) -> Any: ...
    def GetUp(self) -> Any: ...
    def ResetArcball(self) -> Any: ...
    def RotateArcball(self, ax, ay, bx, by) -> Any: ...
    def SetArcballDistance(self, dist) -> Any: ...
    def SetFPSRotation(self, x, y, z) -> Any: ...
    def SetPosition(self, x, y, z) -> Any: ...
    def Shutdown(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class CameraType(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Arcball: ClassVar[importlib._bootstrap.CameraType] = ...
    FPSLook: ClassVar[importlib._bootstrap.CameraType] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class CaptureAccess(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def DriverName(self) -> Any: ...
    def FindSectionByName(self, name) -> Any: ...
    def FindSectionByType(self, type) -> Any: ...
    def GetAvailableGPUs(self) -> Any: ...
    def GetResolve(self, callstack) -> Any: ...
    def GetSectionContents(self, index) -> Any: ...
    def GetSectionCount(self) -> Any: ...
    def GetSectionProperties(self, index) -> Any: ...
    def HasCallstacks(self) -> Any: ...
    def InitResolver(self, interactive, progress) -> Any: ...
    def WriteSection(self, props, contents) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class CaptureFile(CaptureAccess):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Convert(self, filename, filetype, file, progress) -> Any: ...
    def CopyFileTo(self, filename) -> Any: ...
    def GetCaptureFileFormats(self) -> Any: ...
    def GetStructuredData(self) -> Any: ...
    def GetThumbnail(self, type, maxsize) -> Any: ...
    def LocalReplaySupport(self) -> Any: ...
    def OpenBuffer(self, buffer, filetype, progress) -> Any: ...
    def OpenCapture(self, opts, progress) -> Any: ...
    def OpenFile(self, filename, filetype, progress) -> Any: ...
    def RecordedMachineIdent(self) -> Any: ...
    def SetMetadata(self, driverName, machineIdent, thumbType, thumbWidth, thumbHeight, thumbData, timeBase, timeFreq) -> Any: ...
    def SetStructuredData(self, file) -> Any: ...
    def Shutdown(self) -> Any: ...
    def TimestampBase(self) -> Any: ...
    def TimestampFrequency(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class CaptureFileFormat(SwigPyObject):
    convertSupported: Any
    description: Any
    extension: Any
    name: Any
    openSupported: Any
    requiresBuffers: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class CaptureOptions(SwigPyObject):
    allowFullscreen: Any
    allowVSync: Any
    apiValidation: Any
    captureAllCmdLists: Any
    captureCallstacks: Any
    captureCallstacksOnlyActions: Any
    debugOutputMute: Any
    delayForDebugger: Any
    hookIntoChildren: Any
    refAllResources: Any
    this: Any
    thisown: Any
    verifyBufferAccess: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def DecodeFromString(self, encoded) -> Any: ...
    def EncodeAsString(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ChromaSampleLocation(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    CositedEven: ClassVar[importlib._bootstrap.ChromaSampleLocation] = ...
    Midpoint: ClassVar[importlib._bootstrap.ChromaSampleLocation] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class ColorBlend(SwigPyObject):
    alphaBlend: Any
    colorBlend: Any
    enabled: Any
    logicOperation: Any
    logicOperationEnabled: Any
    this: Any
    thisown: Any
    writeMask: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class CompType(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Depth: ClassVar[importlib._bootstrap.CompType] = ...
    Float: ClassVar[importlib._bootstrap.CompType] = ...
    SInt: ClassVar[importlib._bootstrap.CompType] = ...
    SNorm: ClassVar[importlib._bootstrap.CompType] = ...
    SScaled: ClassVar[importlib._bootstrap.CompType] = ...
    Typeless: ClassVar[importlib._bootstrap.CompType] = ...
    UInt: ClassVar[importlib._bootstrap.CompType] = ...
    UNorm: ClassVar[importlib._bootstrap.CompType] = ...
    UNormSRGB: ClassVar[importlib._bootstrap.CompType] = ...
    UScaled: ClassVar[importlib._bootstrap.CompType] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class CompareFunction(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    AlwaysTrue: ClassVar[importlib._bootstrap.CompareFunction] = ...
    Equal: ClassVar[importlib._bootstrap.CompareFunction] = ...
    Greater: ClassVar[importlib._bootstrap.CompareFunction] = ...
    GreaterEqual: ClassVar[importlib._bootstrap.CompareFunction] = ...
    Less: ClassVar[importlib._bootstrap.CompareFunction] = ...
    LessEqual: ClassVar[importlib._bootstrap.CompareFunction] = ...
    Never: ClassVar[importlib._bootstrap.CompareFunction] = ...
    NotEqual: ClassVar[importlib._bootstrap.CompareFunction] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class ConservativeRaster(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Disabled: ClassVar[importlib._bootstrap.ConservativeRaster] = ...
    Overestimate: ClassVar[importlib._bootstrap.ConservativeRaster] = ...
    Underestimate: ClassVar[importlib._bootstrap.ConservativeRaster] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class ConstantBindStats(SwigPyObject):
    BucketCount: ClassVar[int] = ...
    BucketType: ClassVar[int] = ...
    bindslots: Any
    calls: Any
    nulls: Any
    sets: Any
    sizes: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ConstantBlock(SwigPyObject):
    bindPoint: Any
    bufferBacked: Any
    byteSize: Any
    compileConstants: Any
    inlineDataBytes: Any
    name: Any
    this: Any
    thisown: Any
    variables: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class CounterDescription(SwigPyObject):
    category: Any
    counter: Any
    description: Any
    name: Any
    resultByteWidth: Any
    resultType: Any
    this: Any
    thisown: Any
    unit: Any
    uuid: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class CounterResult(SwigPyObject):
    counter: Any
    eventId: Any
    this: Any
    thisown: Any
    value: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class CounterUnit(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Absolute: ClassVar[importlib._bootstrap.CounterUnit] = ...
    Bytes: ClassVar[importlib._bootstrap.CounterUnit] = ...
    Celsius: ClassVar[importlib._bootstrap.CounterUnit] = ...
    Cycles: ClassVar[importlib._bootstrap.CounterUnit] = ...
    Hertz: ClassVar[importlib._bootstrap.CounterUnit] = ...
    Percentage: ClassVar[importlib._bootstrap.CounterUnit] = ...
    Ratio: ClassVar[importlib._bootstrap.CounterUnit] = ...
    Seconds: ClassVar[importlib._bootstrap.CounterUnit] = ...
    Volt: ClassVar[importlib._bootstrap.CounterUnit] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class CounterValue(SwigPyObject):
    d: Any
    f: Any
    this: Any
    thisown: Any
    u32: Any
    u64: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class CullMode(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Back: ClassVar[importlib._bootstrap.CullMode] = ...
    Front: ClassVar[importlib._bootstrap.CullMode] = ...
    FrontAndBack: ClassVar[importlib._bootstrap.CullMode] = ...
    NoCull: ClassVar[importlib._bootstrap.CullMode] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class D3D11BlendState(SwigPyObject):
    alphaToCoverage: Any
    blendFactor: Any
    blends: Any
    independentBlend: Any
    resourceId: Any
    sampleMask: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D11ConstantBuffer(SwigPyObject):
    resourceId: Any
    this: Any
    thisown: Any
    vecCount: Any
    vecOffset: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D11DepthStencilState(SwigPyObject):
    backFace: Any
    depthEnable: Any
    depthFunction: Any
    depthWrites: Any
    frontFace: Any
    resourceId: Any
    stencilEnable: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D11IndexBuffer(SwigPyObject):
    byteOffset: Any
    byteStride: Any
    resourceId: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D11InputAssembly(SwigPyObject):
    bytecode: Any
    indexBuffer: Any
    layouts: Any
    resourceId: Any
    this: Any
    thisown: Any
    topology: Any
    vertexBuffers: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D11Layout(SwigPyObject):
    TightlyPacked: ClassVar[int] = ...
    byteOffset: Any
    format: Any
    inputSlot: Any
    instanceDataStepRate: Any
    perInstance: Any
    semanticIndex: Any
    semanticName: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D11OutputMerger(SwigPyObject):
    blendState: Any
    depthReadOnly: Any
    depthStencilState: Any
    depthTarget: Any
    renderTargets: Any
    stencilReadOnly: Any
    this: Any
    thisown: Any
    uavStartSlot: Any
    uavs: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D11Predication(SwigPyObject):
    isPassing: Any
    resourceId: Any
    this: Any
    thisown: Any
    value: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D11Rasterizer(SwigPyObject):
    scissors: Any
    state: Any
    this: Any
    thisown: Any
    viewports: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D11RasterizerState(SwigPyObject):
    antialiasedLines: Any
    conservativeRasterization: Any
    cullMode: Any
    depthBias: Any
    depthBiasClamp: Any
    depthClip: Any
    fillMode: Any
    forcedSampleCount: Any
    frontCCW: Any
    multisampleEnable: Any
    resourceId: Any
    scissorEnable: Any
    slopeScaledDepthBias: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D11Sampler(SwigPyObject):
    addressU: Any
    addressV: Any
    addressW: Any
    borderColor: Any
    compareFunction: Any
    filter: Any
    maxAnisotropy: Any
    maxLOD: Any
    minLOD: Any
    mipLODBias: Any
    resourceId: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def UseBorder(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D11Shader(SwigPyObject):
    bindpointMapping: Any
    classInstances: Any
    constantBuffers: Any
    reflection: Any
    resourceId: Any
    samplers: Any
    srvs: Any
    stage: Any
    this: Any
    thisown: Any
    uavs: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D11State(SwigPyObject):
    computeShader: Any
    domainShader: Any
    geometryShader: Any
    hullShader: Any
    inputAssembly: Any
    outputMerger: Any
    pixelShader: Any
    predication: Any
    rasterizer: Any
    streamOut: Any
    this: Any
    thisown: Any
    vertexShader: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D11StreamOut(SwigPyObject):
    NoRasterization: ClassVar[int] = ...
    outputs: Any
    rasterizedStream: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D11StreamOutBind(SwigPyObject):
    byteOffset: Any
    resourceId: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D11VertexBuffer(SwigPyObject):
    byteOffset: Any
    byteStride: Any
    resourceId: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D11View(SwigPyObject):
    bufferFlags: Any
    bufferStructCount: Any
    counterResourceId: Any
    elementByteSize: Any
    firstElement: Any
    firstMip: Any
    firstSlice: Any
    numElements: Any
    numMips: Any
    numSlices: Any
    resourceResourceId: Any
    structured: Any
    this: Any
    thisown: Any
    type: Any
    viewFormat: Any
    viewResourceId: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D12BlendState(SwigPyObject):
    alphaToCoverage: Any
    blendFactor: Any
    blends: Any
    independentBlend: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D12ConstantBuffer(SwigPyObject):
    bind: Any
    byteOffset: Any
    byteSize: Any
    resourceId: Any
    rootValues: Any
    tableIndex: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D12DepthStencilState(SwigPyObject):
    backFace: Any
    depthBoundsEnable: Any
    depthEnable: Any
    depthFunction: Any
    depthWrites: Any
    frontFace: Any
    maxDepthBounds: Any
    minDepthBounds: Any
    stencilEnable: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D12IndexBuffer(SwigPyObject):
    byteOffset: Any
    byteSize: Any
    byteStride: Any
    resourceId: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D12InputAssembly(SwigPyObject):
    indexBuffer: Any
    indexStripCutValue: Any
    layouts: Any
    this: Any
    thisown: Any
    topology: Any
    vertexBuffers: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D12Layout(SwigPyObject):
    TightlyPacked: ClassVar[int] = ...
    byteOffset: Any
    format: Any
    inputSlot: Any
    instanceDataStepRate: Any
    perInstance: Any
    semanticIndex: Any
    semanticName: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D12OM(SwigPyObject):
    blendState: Any
    depthReadOnly: Any
    depthStencilState: Any
    depthTarget: Any
    multiSampleCount: Any
    multiSampleQuality: Any
    renderTargets: Any
    stencilReadOnly: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D12Rasterizer(SwigPyObject):
    sampleMask: Any
    scissors: Any
    state: Any
    this: Any
    thisown: Any
    viewports: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D12RasterizerState(SwigPyObject):
    antialiasedLines: Any
    baseShadingRate: Any
    conservativeRasterization: Any
    cullMode: Any
    depthBias: Any
    depthBiasClamp: Any
    depthClip: Any
    fillMode: Any
    forcedSampleCount: Any
    frontCCW: Any
    multisampleEnable: Any
    shadingRateCombiners: Any
    shadingRateImage: Any
    slopeScaledDepthBias: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D12ResourceData(SwigPyObject):
    resourceId: Any
    states: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D12ResourceState(SwigPyObject):
    name: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D12RootSignatureRange(SwigPyObject):
    constantBuffers: Any
    dynamicallyUsedCount: Any
    firstUsedIndex: Any
    immediate: Any
    lastUsedIndex: Any
    registerSpace: Any
    rootSignatureIndex: Any
    samplers: Any
    this: Any
    thisown: Any
    type: Any
    views: Any
    visibility: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D12Sampler(SwigPyObject):
    addressU: Any
    addressV: Any
    addressW: Any
    bind: Any
    borderColor: Any
    compareFunction: Any
    filter: Any
    maxAnisotropy: Any
    maxLOD: Any
    minLOD: Any
    mipLODBias: Any
    tableIndex: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def UseBorder(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D12Shader(SwigPyObject):
    bindpointMapping: Any
    reflection: Any
    resourceId: Any
    stage: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D12State(SwigPyObject):
    computeShader: Any
    domainShader: Any
    geometryShader: Any
    hullShader: Any
    inputAssembly: Any
    outputMerger: Any
    pipelineResourceId: Any
    pixelShader: Any
    rasterizer: Any
    resourceStates: Any
    rootElements: Any
    rootSignatureResourceId: Any
    streamOut: Any
    this: Any
    thisown: Any
    vertexShader: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D12StreamOut(SwigPyObject):
    NoRasterization: ClassVar[int] = ...
    outputs: Any
    rasterizedStream: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D12StreamOutBind(SwigPyObject):
    byteOffset: Any
    byteSize: Any
    resourceId: Any
    this: Any
    thisown: Any
    writtenCountByteOffset: Any
    writtenCountResourceId: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D12VertexBuffer(SwigPyObject):
    byteOffset: Any
    byteSize: Any
    byteStride: Any
    resourceId: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3D12View(SwigPyObject):
    bind: Any
    bufferFlags: Any
    bufferStructCount: Any
    counterByteOffset: Any
    counterResourceId: Any
    dynamicallyUsed: Any
    elementByteSize: Any
    firstElement: Any
    firstMip: Any
    firstSlice: Any
    minLODClamp: Any
    numElements: Any
    numMips: Any
    numSlices: Any
    resourceId: Any
    swizzle: Any
    tableIndex: Any
    this: Any
    thisown: Any
    type: Any
    viewFormat: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class D3DBufferViewFlags(enum.IntFlag):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Append: ClassVar[importlib._bootstrap.D3DBufferViewFlags] = ...
    Counter: ClassVar[importlib._bootstrap.D3DBufferViewFlags] = ...
    NoFlags: ClassVar[importlib._bootstrap.D3DBufferViewFlags] = ...
    Raw: ClassVar[importlib._bootstrap.D3DBufferViewFlags] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class DebugMessage(SwigPyObject):
    category: Any
    description: Any
    eventId: Any
    messageID: Any
    severity: Any
    source: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class DebugOverlay(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    BackfaceCull: ClassVar[importlib._bootstrap.DebugOverlay] = ...
    ClearBeforeDraw: ClassVar[importlib._bootstrap.DebugOverlay] = ...
    ClearBeforePass: ClassVar[importlib._bootstrap.DebugOverlay] = ...
    Clipping: ClassVar[importlib._bootstrap.DebugOverlay] = ...
    Depth: ClassVar[importlib._bootstrap.DebugOverlay] = ...
    Drawcall: ClassVar[importlib._bootstrap.DebugOverlay] = ...
    NaN: ClassVar[importlib._bootstrap.DebugOverlay] = ...
    NoOverlay: ClassVar[importlib._bootstrap.DebugOverlay] = ...
    QuadOverdrawDraw: ClassVar[importlib._bootstrap.DebugOverlay] = ...
    QuadOverdrawPass: ClassVar[importlib._bootstrap.DebugOverlay] = ...
    Stencil: ClassVar[importlib._bootstrap.DebugOverlay] = ...
    TriangleSizeDraw: ClassVar[importlib._bootstrap.DebugOverlay] = ...
    TriangleSizePass: ClassVar[importlib._bootstrap.DebugOverlay] = ...
    ViewportScissor: ClassVar[importlib._bootstrap.DebugOverlay] = ...
    Wireframe: ClassVar[importlib._bootstrap.DebugOverlay] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class DebugVariableReference(SwigPyObject):
    component: Any
    name: Any
    this: Any
    thisown: Any
    type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class DebugVariableType(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Constant: ClassVar[importlib._bootstrap.DebugVariableType] = ...
    Input: ClassVar[importlib._bootstrap.DebugVariableType] = ...
    ReadOnlyResource: ClassVar[importlib._bootstrap.DebugVariableType] = ...
    ReadWriteResource: ClassVar[importlib._bootstrap.DebugVariableType] = ...
    Sampler: ClassVar[importlib._bootstrap.DebugVariableType] = ...
    Undefined: ClassVar[importlib._bootstrap.DebugVariableType] = ...
    Variable: ClassVar[importlib._bootstrap.DebugVariableType] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class DepthStencilStats(SwigPyObject):
    calls: Any
    nulls: Any
    redundants: Any
    sets: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class DeviceProtocolController(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def GetDevices(self) -> Any: ...
    def GetFriendlyName(self, URL) -> Any: ...
    def GetProtocolName(self) -> Any: ...
    def IsSupported(self, URL) -> Any: ...
    def StartRemoteServer(self, URL) -> Any: ...
    def SupportsMultiplePrograms(self, URL) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class DispatchStats(SwigPyObject):
    calls: Any
    indirect: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class DrawcallStats(SwigPyObject):
    BucketCount: ClassVar[int] = ...
    BucketSize: ClassVar[int] = ...
    BucketType: ClassVar[int] = ...
    calls: Any
    counts: Any
    indirect: Any
    instanced: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class DriverInformation(SwigPyObject):
    this: Any
    thisown: Any
    vendor: Any
    version: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class EnvMod(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Append: ClassVar[importlib._bootstrap.EnvMod] = ...
    Prepend: ClassVar[importlib._bootstrap.EnvMod] = ...
    Set: ClassVar[importlib._bootstrap.EnvMod] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class EnvSep(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Colon: ClassVar[importlib._bootstrap.EnvSep] = ...
    NoSep: ClassVar[importlib._bootstrap.EnvSep] = ...
    Platform: ClassVar[importlib._bootstrap.EnvSep] = ...
    SemiColon: ClassVar[importlib._bootstrap.EnvSep] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class EnvironmentModification(SwigPyObject):
    mod: Any
    name: Any
    sep: Any
    this: Any
    thisown: Any
    value: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class EventUsage(SwigPyObject):
    eventId: Any
    this: Any
    thisown: Any
    usage: Any
    view: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ExecuteResult(SwigPyObject):
    ident: Any
    result: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class FileType(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    BMP: ClassVar[importlib._bootstrap.FileType] = ...
    Count: ClassVar[importlib._bootstrap.FileType] = ...
    DDS: ClassVar[importlib._bootstrap.FileType] = ...
    EXR: ClassVar[importlib._bootstrap.FileType] = ...
    First: ClassVar[importlib._bootstrap.FileType] = ...
    HDR: ClassVar[importlib._bootstrap.FileType] = ...
    JPG: ClassVar[importlib._bootstrap.FileType] = ...
    PNG: ClassVar[importlib._bootstrap.FileType] = ...
    Raw: ClassVar[importlib._bootstrap.FileType] = ...
    TGA: ClassVar[importlib._bootstrap.FileType] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class FillMode(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Point: ClassVar[importlib._bootstrap.FillMode] = ...
    Solid: ClassVar[importlib._bootstrap.FillMode] = ...
    Wireframe: ClassVar[importlib._bootstrap.FillMode] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class FilterFunction(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Comparison: ClassVar[importlib._bootstrap.FilterFunction] = ...
    Maximum: ClassVar[importlib._bootstrap.FilterFunction] = ...
    Minimum: ClassVar[importlib._bootstrap.FilterFunction] = ...
    Normal: ClassVar[importlib._bootstrap.FilterFunction] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class FilterMode(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Anisotropic: ClassVar[importlib._bootstrap.FilterMode] = ...
    Cubic: ClassVar[importlib._bootstrap.FilterMode] = ...
    Linear: ClassVar[importlib._bootstrap.FilterMode] = ...
    NoFilter: ClassVar[importlib._bootstrap.FilterMode] = ...
    Point: ClassVar[importlib._bootstrap.FilterMode] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class FloatVector(SwigPyObject):
    this: Any
    thisown: Any
    w: Any
    x: Any
    y: Any
    z: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class FrameDescription(SwigPyObject):
    NoFrameNumber: ClassVar[int] = ...
    captureTime: Any
    compressedFileSize: Any
    debugMessages: Any
    fileOffset: Any
    frameNumber: Any
    initDataSize: Any
    persistentSize: Any
    stats: Any
    this: Any
    thisown: Any
    uncompressedFileSize: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class FrameStatistics(SwigPyObject):
    blends: Any
    constants: Any
    depths: Any
    dispatches: Any
    draws: Any
    indices: Any
    layouts: Any
    outputs: Any
    rasters: Any
    recorded: Any
    resources: Any
    samplers: Any
    shaders: Any
    this: Any
    thisown: Any
    updates: Any
    vertices: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class GLAttachment(SwigPyObject):
    mipLevel: Any
    numSlices: Any
    resourceId: Any
    slice: Any
    swizzle: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class GLBlendState(SwigPyObject):
    blendFactor: Any
    blends: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class GLBuffer(SwigPyObject):
    byteOffset: Any
    byteSize: Any
    resourceId: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class GLDepthState(SwigPyObject):
    depthBounds: Any
    depthEnable: Any
    depthFunction: Any
    depthWrites: Any
    farBound: Any
    nearBound: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class GLFBO(SwigPyObject):
    colorAttachments: Any
    depthAttachment: Any
    drawBuffers: Any
    readBuffer: Any
    resourceId: Any
    stencilAttachment: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class GLFeedback(SwigPyObject):
    active: Any
    bufferResourceId: Any
    byteOffset: Any
    byteSize: Any
    feedbackResourceId: Any
    paused: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class GLFixedVertexProcessing(SwigPyObject):
    clipNegativeOneToOne: Any
    clipOriginLowerLeft: Any
    clipPlanes: Any
    defaultInnerLevel: Any
    defaultOuterLevel: Any
    discard: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class GLFrameBuffer(SwigPyObject):
    blendState: Any
    dither: Any
    drawFBO: Any
    framebufferSRGB: Any
    readFBO: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class GLHints(SwigPyObject):
    derivatives: Any
    lineSmoothing: Any
    lineSmoothingEnabled: Any
    polySmoothing: Any
    polySmoothingEnabled: Any
    textureCompression: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class GLImageLoadStore(SwigPyObject):
    imageFormat: Any
    layered: Any
    mipLevel: Any
    readAllowed: Any
    resourceId: Any
    slice: Any
    this: Any
    thisown: Any
    type: Any
    writeAllowed: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class GLRasterizer(SwigPyObject):
    scissors: Any
    state: Any
    this: Any
    thisown: Any
    viewports: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class GLRasterizerState(SwigPyObject):
    alphaToCoverage: Any
    alphaToOne: Any
    cullMode: Any
    depthBias: Any
    depthClamp: Any
    fillMode: Any
    frontCCW: Any
    lineWidth: Any
    minSampleShadingRate: Any
    multisampleEnable: Any
    offsetClamp: Any
    pointFadeThreshold: Any
    pointOriginUpperLeft: Any
    pointSize: Any
    programmablePointSize: Any
    sampleCoverage: Any
    sampleCoverageInvert: Any
    sampleCoverageValue: Any
    sampleMask: Any
    sampleMaskValue: Any
    sampleShading: Any
    slopeScaledDepthBias: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class GLSampler(SwigPyObject):
    addressR: Any
    addressS: Any
    addressT: Any
    borderColor: Any
    compareFunction: Any
    filter: Any
    maxAnisotropy: Any
    maxLOD: Any
    minLOD: Any
    mipLODBias: Any
    resourceId: Any
    seamlessCubeMap: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def UseBorder(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class GLShader(SwigPyObject):
    bindpointMapping: Any
    programResourceId: Any
    reflection: Any
    shaderResourceId: Any
    stage: Any
    subroutines: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class GLState(SwigPyObject):
    atomicBuffers: Any
    computeShader: Any
    depthState: Any
    fragmentShader: Any
    framebuffer: Any
    geometryShader: Any
    hints: Any
    images: Any
    pipelineResourceId: Any
    rasterizer: Any
    samplers: Any
    shaderStorageBuffers: Any
    stencilState: Any
    tessControlShader: Any
    tessEvalShader: Any
    textures: Any
    this: Any
    thisown: Any
    transformFeedback: Any
    uniformBuffers: Any
    vertexInput: Any
    vertexProcessing: Any
    vertexShader: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class GLStencilState(SwigPyObject):
    backFace: Any
    frontFace: Any
    stencilEnable: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class GLTexture(SwigPyObject):
    completeStatus: Any
    depthReadChannel: Any
    firstMip: Any
    numMips: Any
    resourceId: Any
    swizzle: Any
    this: Any
    thisown: Any
    type: Any
    typeConflict: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class GLVertexAttribute(SwigPyObject):
    byteOffset: Any
    enabled: Any
    floatCast: Any
    format: Any
    genericValue: Any
    this: Any
    thisown: Any
    vertexBufferSlot: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class GLVertexBuffer(SwigPyObject):
    byteOffset: Any
    byteStride: Any
    instanceDivisor: Any
    resourceId: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class GLVertexInput(SwigPyObject):
    attributes: Any
    indexBuffer: Any
    indexByteStride: Any
    primitiveRestart: Any
    provokingVertexLast: Any
    restartIndex: Any
    this: Any
    thisown: Any
    topology: Any
    vertexArrayObject: Any
    vertexBuffers: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class GPUCounter(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    CSInvocations: ClassVar[importlib._bootstrap.GPUCounter] = ...
    Count: ClassVar[importlib._bootstrap.GPUCounter] = ...
    DSInvocations: ClassVar[importlib._bootstrap.GPUCounter] = ...
    EventGPUDuration: ClassVar[importlib._bootstrap.GPUCounter] = ...
    FSInvocations: ClassVar[importlib._bootstrap.GPUCounter] = ...
    First: ClassVar[importlib._bootstrap.GPUCounter] = ...
    FirstAMD: ClassVar[importlib._bootstrap.GPUCounter] = ...
    FirstARM: ClassVar[importlib._bootstrap.GPUCounter] = ...
    FirstIntel: ClassVar[importlib._bootstrap.GPUCounter] = ...
    FirstNvidia: ClassVar[importlib._bootstrap.GPUCounter] = ...
    FirstVulkanExtended: ClassVar[importlib._bootstrap.GPUCounter] = ...
    GSInvocations: ClassVar[importlib._bootstrap.GPUCounter] = ...
    GSPrimitives: ClassVar[importlib._bootstrap.GPUCounter] = ...
    HSInvocations: ClassVar[importlib._bootstrap.GPUCounter] = ...
    IAPrimitives: ClassVar[importlib._bootstrap.GPUCounter] = ...
    InputVerticesRead: ClassVar[importlib._bootstrap.GPUCounter] = ...
    LastAMD: ClassVar[importlib._bootstrap.GPUCounter] = ...
    LastARM: ClassVar[importlib._bootstrap.GPUCounter] = ...
    LastIntel: ClassVar[importlib._bootstrap.GPUCounter] = ...
    LastNvidia: ClassVar[importlib._bootstrap.GPUCounter] = ...
    LastVulkanExtended: ClassVar[importlib._bootstrap.GPUCounter] = ...
    PSInvocations: ClassVar[importlib._bootstrap.GPUCounter] = ...
    RasterizedPrimitives: ClassVar[importlib._bootstrap.GPUCounter] = ...
    RasterizerInvocations: ClassVar[importlib._bootstrap.GPUCounter] = ...
    SamplesPassed: ClassVar[importlib._bootstrap.GPUCounter] = ...
    TCSInvocations: ClassVar[importlib._bootstrap.GPUCounter] = ...
    TESInvocations: ClassVar[importlib._bootstrap.GPUCounter] = ...
    VSInvocations: ClassVar[importlib._bootstrap.GPUCounter] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class GPUDevice(SwigPyObject):
    apis: Any
    deviceID: Any
    driver: Any
    name: Any
    this: Any
    thisown: Any
    vendor: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class GPUVendor(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    AMD: ClassVar[importlib._bootstrap.GPUVendor] = ...
    ARM: ClassVar[importlib._bootstrap.GPUVendor] = ...
    Broadcom: ClassVar[importlib._bootstrap.GPUVendor] = ...
    Imagination: ClassVar[importlib._bootstrap.GPUVendor] = ...
    Intel: ClassVar[importlib._bootstrap.GPUVendor] = ...
    Qualcomm: ClassVar[importlib._bootstrap.GPUVendor] = ...
    Samsung: ClassVar[importlib._bootstrap.GPUVendor] = ...
    Software: ClassVar[importlib._bootstrap.GPUVendor] = ...
    Unknown: ClassVar[importlib._bootstrap.GPUVendor] = ...
    Verisilicon: ClassVar[importlib._bootstrap.GPUVendor] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...
    nVidia: ClassVar[importlib._bootstrap.GPUVendor] = ...

class GlobalEnvironment(SwigPyObject):
    enumerateGPUs: Any
    this: Any
    thisown: Any
    waylandDisplay: Any
    xlibDisplay: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class GraphicsAPI(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    D3D11: ClassVar[importlib._bootstrap.GraphicsAPI] = ...
    D3D12: ClassVar[importlib._bootstrap.GraphicsAPI] = ...
    OpenGL: ClassVar[importlib._bootstrap.GraphicsAPI] = ...
    Vulkan: ClassVar[importlib._bootstrap.GraphicsAPI] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class IndexBindStats(SwigPyObject):
    calls: Any
    nulls: Any
    sets: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class InstructionSourceInfo(SwigPyObject):
    instruction: Any
    lineInfo: Any
    sourceVars: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class KnownShaderTool(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Count: ClassVar[importlib._bootstrap.KnownShaderTool] = ...
    First: ClassVar[importlib._bootstrap.KnownShaderTool] = ...
    SPIRV_Cross: ClassVar[importlib._bootstrap.KnownShaderTool] = ...
    SPIRV_Cross_OpenGL: ClassVar[importlib._bootstrap.KnownShaderTool] = ...
    Unknown: ClassVar[importlib._bootstrap.KnownShaderTool] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...
    dxcDXIL: ClassVar[importlib._bootstrap.KnownShaderTool] = ...
    dxcSPIRV: ClassVar[importlib._bootstrap.KnownShaderTool] = ...
    fxc: ClassVar[importlib._bootstrap.KnownShaderTool] = ...
    glslangValidatorGLSL: ClassVar[importlib._bootstrap.KnownShaderTool] = ...
    glslangValidatorGLSL_OpenGL: ClassVar[importlib._bootstrap.KnownShaderTool] = ...
    glslangValidatorHLSL: ClassVar[importlib._bootstrap.KnownShaderTool] = ...
    spirv_as: ClassVar[importlib._bootstrap.KnownShaderTool] = ...
    spirv_as_OpenGL: ClassVar[importlib._bootstrap.KnownShaderTool] = ...
    spirv_dis: ClassVar[importlib._bootstrap.KnownShaderTool] = ...
    spirv_dis_OpenGL: ClassVar[importlib._bootstrap.KnownShaderTool] = ...

class LayoutBindStats(SwigPyObject):
    calls: Any
    nulls: Any
    sets: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class LineColumnInfo(SwigPyObject):
    colEnd: Any
    colStart: Any
    disassemblyLine: Any
    fileIndex: Any
    lineEnd: Any
    lineStart: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def SourceEqual(self, o) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class LineRaster(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Bresenham: ClassVar[importlib._bootstrap.LineRaster] = ...
    Default: ClassVar[importlib._bootstrap.LineRaster] = ...
    Rectangular: ClassVar[importlib._bootstrap.LineRaster] = ...
    RectangularSmooth: ClassVar[importlib._bootstrap.LineRaster] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class LogType(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Comment: ClassVar[importlib._bootstrap.LogType] = ...
    Count: ClassVar[importlib._bootstrap.LogType] = ...
    Debug: ClassVar[importlib._bootstrap.LogType] = ...
    Error: ClassVar[importlib._bootstrap.LogType] = ...
    Fatal: ClassVar[importlib._bootstrap.LogType] = ...
    First: ClassVar[importlib._bootstrap.LogType] = ...
    Warning: ClassVar[importlib._bootstrap.LogType] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class LogicOperation(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    And: ClassVar[importlib._bootstrap.LogicOperation] = ...
    AndInverted: ClassVar[importlib._bootstrap.LogicOperation] = ...
    AndReverse: ClassVar[importlib._bootstrap.LogicOperation] = ...
    Clear: ClassVar[importlib._bootstrap.LogicOperation] = ...
    Copy: ClassVar[importlib._bootstrap.LogicOperation] = ...
    CopyInverted: ClassVar[importlib._bootstrap.LogicOperation] = ...
    Equivalent: ClassVar[importlib._bootstrap.LogicOperation] = ...
    Invert: ClassVar[importlib._bootstrap.LogicOperation] = ...
    Nand: ClassVar[importlib._bootstrap.LogicOperation] = ...
    NoOp: ClassVar[importlib._bootstrap.LogicOperation] = ...
    Nor: ClassVar[importlib._bootstrap.LogicOperation] = ...
    Or: ClassVar[importlib._bootstrap.LogicOperation] = ...
    OrInverted: ClassVar[importlib._bootstrap.LogicOperation] = ...
    OrReverse: ClassVar[importlib._bootstrap.LogicOperation] = ...
    Set: ClassVar[importlib._bootstrap.LogicOperation] = ...
    Xor: ClassVar[importlib._bootstrap.LogicOperation] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class MeshDataStage(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    GSOut: ClassVar[importlib._bootstrap.MeshDataStage] = ...
    Unknown: ClassVar[importlib._bootstrap.MeshDataStage] = ...
    VSIn: ClassVar[importlib._bootstrap.MeshDataStage] = ...
    VSOut: ClassVar[importlib._bootstrap.MeshDataStage] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class MeshDisplay(SwigPyObject):
    NoHighlight: ClassVar[int] = ...
    aspect: Any
    axisMapping: Any
    cam: Any
    curInstance: Any
    curView: Any
    fov: Any
    highlightVert: Any
    maxBounds: Any
    minBounds: Any
    ortho: Any
    position: Any
    second: Any
    showAllInstances: Any
    showBBox: Any
    showPrevInstances: Any
    showWholePass: Any
    solidShadeMode: Any
    this: Any
    thisown: Any
    type: Any
    wireframeDraw: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class MeshFormat(SwigPyObject):
    allowRestart: Any
    baseVertex: Any
    farPlane: Any
    flipY: Any
    format: Any
    indexByteOffset: Any
    indexByteSize: Any
    indexByteStride: Any
    indexResourceId: Any
    instStepRate: Any
    instanced: Any
    meshColor: Any
    nearPlane: Any
    numIndices: Any
    restartIndex: Any
    showAlpha: Any
    status: Any
    this: Any
    thisown: Any
    topology: Any
    unproject: Any
    vertexByteOffset: Any
    vertexByteSize: Any
    vertexByteStride: Any
    vertexResourceId: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class MessageCategory(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Application_Defined: ClassVar[importlib._bootstrap.MessageCategory] = ...
    Cleanup: ClassVar[importlib._bootstrap.MessageCategory] = ...
    Compilation: ClassVar[importlib._bootstrap.MessageCategory] = ...
    Deprecated: ClassVar[importlib._bootstrap.MessageCategory] = ...
    Execution: ClassVar[importlib._bootstrap.MessageCategory] = ...
    Initialization: ClassVar[importlib._bootstrap.MessageCategory] = ...
    Miscellaneous: ClassVar[importlib._bootstrap.MessageCategory] = ...
    Performance: ClassVar[importlib._bootstrap.MessageCategory] = ...
    Portability: ClassVar[importlib._bootstrap.MessageCategory] = ...
    Resource_Manipulation: ClassVar[importlib._bootstrap.MessageCategory] = ...
    Shaders: ClassVar[importlib._bootstrap.MessageCategory] = ...
    State_Creation: ClassVar[importlib._bootstrap.MessageCategory] = ...
    State_Getting: ClassVar[importlib._bootstrap.MessageCategory] = ...
    State_Setting: ClassVar[importlib._bootstrap.MessageCategory] = ...
    Undefined: ClassVar[importlib._bootstrap.MessageCategory] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class MessageSeverity(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    High: ClassVar[importlib._bootstrap.MessageSeverity] = ...
    Info: ClassVar[importlib._bootstrap.MessageSeverity] = ...
    Low: ClassVar[importlib._bootstrap.MessageSeverity] = ...
    Medium: ClassVar[importlib._bootstrap.MessageSeverity] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class MessageSource(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    API: ClassVar[importlib._bootstrap.MessageSource] = ...
    GCNPerformance: ClassVar[importlib._bootstrap.MessageSource] = ...
    GeneralPerformance: ClassVar[importlib._bootstrap.MessageSource] = ...
    IncorrectAPIUse: ClassVar[importlib._bootstrap.MessageSource] = ...
    RedundantAPIUse: ClassVar[importlib._bootstrap.MessageSource] = ...
    RuntimeWarning: ClassVar[importlib._bootstrap.MessageSource] = ...
    UnsupportedConfiguration: ClassVar[importlib._bootstrap.MessageSource] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class ModificationValue(SwigPyObject):
    col: Any
    depth: Any
    stencil: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def IsValid(self) -> Any: ...
    def SetInvalid(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class NewCaptureData(SwigPyObject):
    api: Any
    byteSize: Any
    captureId: Any
    frameNumber: Any
    local: Any
    path: Any
    this: Any
    thisown: Any
    thumbHeight: Any
    thumbWidth: Any
    thumbnail: Any
    timestamp: Any
    title: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class NewChildData(SwigPyObject):
    ident: Any
    processId: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class Offset(SwigPyObject):
    this: Any
    thisown: Any
    x: Any
    y: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class OutputTargetStats(SwigPyObject):
    bindslots: Any
    calls: Any
    nulls: Any
    sets: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class PathEntry(SwigPyObject):
    filename: Any
    flags: Any
    lastmod: Any
    size: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class PathProperty(enum.IntFlag):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Directory: ClassVar[importlib._bootstrap.PathProperty] = ...
    ErrorAccessDenied: ClassVar[importlib._bootstrap.PathProperty] = ...
    ErrorInvalidPath: ClassVar[importlib._bootstrap.PathProperty] = ...
    ErrorUnknown: ClassVar[importlib._bootstrap.PathProperty] = ...
    Executable: ClassVar[importlib._bootstrap.PathProperty] = ...
    Hidden: ClassVar[importlib._bootstrap.PathProperty] = ...
    NoFlags: ClassVar[importlib._bootstrap.PathProperty] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class PipeState(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Abbrev(self, stage) -> Any: ...
    def GetBindpointMapping(self, stage) -> Any: ...
    def GetColorBlends(self) -> Any: ...
    def GetComputePipelineObject(self) -> Any: ...
    def GetConstantBuffer(self, stage, BufIdx, ArrayIdx) -> Any: ...
    def GetDepthResolveTarget(self) -> Any: ...
    def GetDepthTarget(self) -> Any: ...
    def GetGraphicsPipelineObject(self) -> Any: ...
    def GetIBuffer(self) -> Any: ...
    def GetOutputTargets(self) -> Any: ...
    def GetPrimitiveTopology(self) -> Any: ...
    def GetRasterizedStream(self) -> Any: ...
    @overload
    def GetReadOnlyResources(self, stage, onlyUsed = ...) -> Any: ...
    @overload
    def GetReadOnlyResources(stage) -> Any: ...
    @overload
    def GetReadWriteResources(self, stage, onlyUsed = ...) -> Any: ...
    @overload
    def GetReadWriteResources(stage) -> Any: ...
    def GetResourceLayout(self, id) -> Any: ...
    def GetRestartIndex(self) -> Any: ...
    def GetSamplers(self, stage) -> Any: ...
    def GetScissor(self, index) -> Any: ...
    def GetShader(self, stage) -> Any: ...
    def GetShaderEntryPoint(self, stage) -> Any: ...
    def GetShaderMessages(self) -> Any: ...
    def GetShaderReflection(self, stage) -> Any: ...
    def GetStencilFaces(self) -> Any: ...
    def GetVBuffers(self) -> Any: ...
    def GetVertexInputs(self) -> Any: ...
    def GetViewport(self, index) -> Any: ...
    def HasAlignedPostVSData(self, stage) -> Any: ...
    def IsCaptureD3D11(self) -> Any: ...
    def IsCaptureD3D12(self) -> Any: ...
    def IsCaptureGL(self) -> Any: ...
    def IsCaptureLoaded(self) -> Any: ...
    def IsCaptureVK(self) -> Any: ...
    def IsIndependentBlendingEnabled(self) -> Any: ...
    def IsRestartEnabled(self) -> Any: ...
    def IsTessellationEnabled(self) -> Any: ...
    def MultiviewBroadcastCount(self) -> Any: ...
    def OutputAbbrev(self) -> Any: ...
    def SupportsBarriers(self) -> Any: ...
    def SupportsResourceArrays(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class PixelModification(SwigPyObject):
    backfaceCulled: Any
    depthBoundsFailed: Any
    depthClipped: Any
    depthTestFailed: Any
    directShaderWrite: Any
    eventId: Any
    fragIndex: Any
    postMod: Any
    preMod: Any
    predicationSkipped: Any
    primitiveID: Any
    sampleMasked: Any
    scissorClipped: Any
    shaderDiscarded: Any
    shaderOut: Any
    stencilTestFailed: Any
    this: Any
    thisown: Any
    unboundPS: Any
    viewClipped: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Passed(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class PixelValue(SwigPyObject):
    floatValue: Any
    intValue: Any
    this: Any
    thisown: Any
    uintValue: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class PointerVal(SwigPyObject):
    pointer: Any
    pointerTypeID: Any
    shader: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class QualityHint(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    DontCare: ClassVar[importlib._bootstrap.QualityHint] = ...
    Fastest: ClassVar[importlib._bootstrap.QualityHint] = ...
    Nicest: ClassVar[importlib._bootstrap.QualityHint] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class RasterizationStats(SwigPyObject):
    calls: Any
    nulls: Any
    rects: Any
    redundants: Any
    sets: Any
    this: Any
    thisown: Any
    viewports: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class RemoteServer(CaptureAccess):
    NoPreference: ClassVar[int] = ...
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def CloseCapture(self, rend) -> Any: ...
    def CopyCaptureFromRemote(self, remotepath, localpath, progress) -> Any: ...
    def CopyCaptureToRemote(self, filename, progress) -> Any: ...
    def ExecuteAndInject(self, app, workingDir, cmdLine, env, opts) -> Any: ...
    def GetHomeFolder(self) -> Any: ...
    def ListFolder(self, path) -> Any: ...
    def LocalProxies(self) -> Any: ...
    def OpenCapture(self, proxyid, logfile, opts, progress) -> Any: ...
    def Ping(self) -> Any: ...
    def RemoteSupportedReplays(self) -> Any: ...
    def ShutdownConnection(self) -> Any: ...
    def ShutdownServerAndConnection(self) -> Any: ...
    def TakeOwnershipCapture(self, filename) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ReplayController(SwigPyObject):
    NoPreference: ClassVar[int] = ...
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def AddFakeMarkers(self) -> Any: ...
    def BuildCustomShader(self, entry, sourceEncoding, source, compileFlags, type) -> Any: ...
    def BuildTargetShader(self, entry, sourceEncoding, source, compileFlags, type) -> Any: ...
    def CancelReplayLoop(self) -> Any: ...
    def ContinueDebug(self, debugger) -> Any: ...
    def CreateOutput(self, window, type) -> Any: ...
    def CreateRGPProfile(self, window) -> Any: ...
    def DebugPixel(self, x, y, sample, primitive) -> Any: ...
    def DebugThread(self, groupid, threadid) -> Any: ...
    def DebugVertex(self, vertid, instid, idx, view) -> Any: ...
    def DescribeCounter(self, counter) -> Any: ...
    def DisassembleShader(self, pipeline, refl, target) -> Any: ...
    def EnumerateCounters(self) -> Any: ...
    def FetchCounters(self, counters) -> Any: ...
    def FileChanged(self) -> Any: ...
    def FreeCustomShader(self, id) -> Any: ...
    def FreeTargetResource(self, id) -> Any: ...
    def FreeTrace(self, trace) -> Any: ...
    def GetAPIProperties(self) -> Any: ...
    def GetBufferData(self, buff, offset, len) -> Any: ...
    def GetBuffers(self) -> Any: ...
    def GetCBufferVariableContents(self, pipeline, shader, stage, entryPoint, cbufslot, buffer, offset, length) -> Any: ...
    def GetCustomShaderEncodings(self) -> Any: ...
    def GetCustomShaderSourcePrefixes(self) -> Any: ...
    def GetD3D11PipelineState(self) -> Any: ...
    def GetD3D12PipelineState(self) -> Any: ...
    def GetDebugMessages(self) -> Any: ...
    def GetDisassemblyTargets(self, withPipeline) -> Any: ...
    def GetFatalErrorStatus(self) -> Any: ...
    def GetFrameInfo(self) -> Any: ...
    def GetGLPipelineState(self) -> Any: ...
    def GetHistogram(self, textureId, sub, typeCast, minval, maxval, channels) -> Any: ...
    def GetMinMax(self, textureId, sub, typeCast) -> Any: ...
    def GetPipelineState(self) -> Any: ...
    def GetPostVSData(self, instance, view, stage) -> Any: ...
    def GetResources(self) -> Any: ...
    def GetRootActions(self) -> Any: ...
    def GetShader(self, pipeline, shader, entry) -> Any: ...
    def GetShaderEntryPoints(self, shader) -> Any: ...
    def GetStructuredFile(self) -> Any: ...
    def GetSupportedWindowSystems(self) -> Any: ...
    def GetTargetShaderEncodings(self) -> Any: ...
    def GetTextureData(self, tex, sub) -> Any: ...
    def GetTextures(self) -> Any: ...
    def GetUsage(self, id) -> Any: ...
    def GetVulkanPipelineState(self) -> Any: ...
    def PickPixel(self, textureId, x, y, sub, typeCast) -> Any: ...
    def PixelHistory(self, texture, x, y, sub, typeCast) -> Any: ...
    def RemoveReplacement(self, id) -> Any: ...
    def ReplaceResource(self, original, replacement) -> Any: ...
    def ReplayLoop(self, window, texid) -> Any: ...
    def SaveTexture(self, saveData, path) -> Any: ...
    def SetCustomShaderIncludes(self, directories) -> Any: ...
    def SetFrameEvent(self, eventId, force) -> Any: ...
    def Shutdown(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ReplayOptimisationLevel(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Balanced: ClassVar[importlib._bootstrap.ReplayOptimisationLevel] = ...
    Conservative: ClassVar[importlib._bootstrap.ReplayOptimisationLevel] = ...
    Count: ClassVar[importlib._bootstrap.ReplayOptimisationLevel] = ...
    Fastest: ClassVar[importlib._bootstrap.ReplayOptimisationLevel] = ...
    First: ClassVar[importlib._bootstrap.ReplayOptimisationLevel] = ...
    NoOptimisation: ClassVar[importlib._bootstrap.ReplayOptimisationLevel] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class ReplayOptions(SwigPyObject):
    apiValidation: Any
    forceGPUDeviceID: Any
    forceGPUDriverName: Any
    forceGPUVendor: Any
    optimisation: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ReplayOutput(SwigPyObject):
    NoResult: ClassVar[int] = ...
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def AddThumbnail(self, window, textureId, sub, typeCast) -> Any: ...
    def ClearThumbnails(self) -> Any: ...
    def DisablePixelContext(self) -> Any: ...
    def Display(self) -> Any: ...
    def DrawThumbnail(self, width, height, textureId, sub, typeCast) -> Any: ...
    def GetCustomShaderTexID(self) -> Any: ...
    def GetDebugOverlayTexID(self) -> Any: ...
    def GetDimensions(self) -> Any: ...
    def PickVertex(self, x, y) -> Any: ...
    def ReadbackOutputTexture(self) -> Any: ...
    def SetDimensions(self, width, height) -> Any: ...
    def SetMeshDisplay(self, config) -> Any: ...
    def SetPixelContext(self, window) -> Any: ...
    def SetPixelContextLocation(self, x, y) -> Any: ...
    def SetTextureDisplay(self, config) -> Any: ...
    def Shutdown(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ReplayOutputType(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Headless: ClassVar[importlib._bootstrap.ReplayOutputType] = ...
    Mesh: ClassVar[importlib._bootstrap.ReplayOutputType] = ...
    Texture: ClassVar[importlib._bootstrap.ReplayOutputType] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class ReplaySupport(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    SuggestRemote: ClassVar[importlib._bootstrap.ReplaySupport] = ...
    Supported: ClassVar[importlib._bootstrap.ReplaySupport] = ...
    Unsupported: ClassVar[importlib._bootstrap.ReplaySupport] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class ResourceBindStats(SwigPyObject):
    bindslots: Any
    calls: Any
    nulls: Any
    sets: Any
    this: Any
    thisown: Any
    types: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ResourceDescription(SwigPyObject):
    autogeneratedName: Any
    derivedResources: Any
    initialisationChunks: Any
    name: Any
    parentResources: Any
    resourceId: Any
    this: Any
    thisown: Any
    type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def SetCustomName(self, givenName) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ResourceFormat(SwigPyObject):
    compByteWidth: Any
    compCount: Any
    compType: Any
    this: Any
    thisown: Any
    type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def BGRAOrder(self) -> Any: ...
    def BlockFormat(self) -> Any: ...
    def ElementSize(self) -> Any: ...
    def Name(self) -> Any: ...
    def SRGBCorrected(self) -> Any: ...
    def SetBGRAOrder(self, flag) -> Any: ...
    def SetYUVPlaneCount(self, planes) -> Any: ...
    def SetYUVSubsampling(self, subsampling) -> Any: ...
    def Special(self) -> Any: ...
    def YUVPlaneCount(self) -> Any: ...
    def YUVSubsampling(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ResourceFormatType(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    A8: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    ASTC: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    BC1: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    BC2: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    BC3: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    BC4: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    BC5: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    BC6: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    BC7: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    D16S8: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    D24S8: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    D32S8: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    EAC: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    ETC2: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    PVRTC: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    R10G10B10A2: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    R11G11B10: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    R4G4: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    R4G4B4A4: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    R5G5B5A1: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    R5G6B5: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    R9G9B9E5: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    Regular: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    S8: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    Undefined: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    YUV10: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    YUV12: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    YUV16: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    YUV8: ClassVar[importlib._bootstrap.ResourceFormatType] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class ResourceId(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Null(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __int__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ResourceType(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Buffer: ClassVar[importlib._bootstrap.ResourceType] = ...
    CommandBuffer: ClassVar[importlib._bootstrap.ResourceType] = ...
    Device: ClassVar[importlib._bootstrap.ResourceType] = ...
    Memory: ClassVar[importlib._bootstrap.ResourceType] = ...
    PipelineState: ClassVar[importlib._bootstrap.ResourceType] = ...
    Pool: ClassVar[importlib._bootstrap.ResourceType] = ...
    Query: ClassVar[importlib._bootstrap.ResourceType] = ...
    Queue: ClassVar[importlib._bootstrap.ResourceType] = ...
    RenderPass: ClassVar[importlib._bootstrap.ResourceType] = ...
    Sampler: ClassVar[importlib._bootstrap.ResourceType] = ...
    Shader: ClassVar[importlib._bootstrap.ResourceType] = ...
    ShaderBinding: ClassVar[importlib._bootstrap.ResourceType] = ...
    StateObject: ClassVar[importlib._bootstrap.ResourceType] = ...
    SwapchainImage: ClassVar[importlib._bootstrap.ResourceType] = ...
    Sync: ClassVar[importlib._bootstrap.ResourceType] = ...
    Texture: ClassVar[importlib._bootstrap.ResourceType] = ...
    Unknown: ClassVar[importlib._bootstrap.ResourceType] = ...
    View: ClassVar[importlib._bootstrap.ResourceType] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class ResourceUpdateStats(SwigPyObject):
    BucketCount: ClassVar[int] = ...
    BucketType: ClassVar[int] = ...
    calls: Any
    clients: Any
    servers: Any
    sizes: Any
    this: Any
    thisown: Any
    types: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ResourceUsage(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    All_Constants: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    All_RWResource: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    All_Resource: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    Barrier: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    CPUWrite: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    CS_Constants: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    CS_RWResource: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    CS_Resource: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    Clear: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    ColorTarget: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    Copy: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    CopyDst: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    CopySrc: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    DS_Constants: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    DS_RWResource: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    DS_Resource: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    DepthStencilTarget: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    Discard: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    GS_Constants: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    GS_RWResource: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    GS_Resource: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    GenMips: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    HS_Constants: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    HS_RWResource: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    HS_Resource: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    IndexBuffer: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    Indirect: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    InputTarget: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    PS_Constants: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    PS_RWResource: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    PS_Resource: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    Resolve: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    ResolveDst: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    ResolveSrc: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    StreamOut: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    Unused: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    VS_Constants: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    VS_RWResource: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    VS_Resource: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    VertexBuffer: ClassVar[importlib._bootstrap.ResourceUsage] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class ResultCode(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    APIDataCorrupted: ClassVar[importlib._bootstrap.ResultCode] = ...
    APIHardwareUnsupported: ClassVar[importlib._bootstrap.ResultCode] = ...
    APIIncompatibleVersion: ClassVar[importlib._bootstrap.ResultCode] = ...
    APIInitFailed: ClassVar[importlib._bootstrap.ResultCode] = ...
    APIReplayFailed: ClassVar[importlib._bootstrap.ResultCode] = ...
    APIUnsupported: ClassVar[importlib._bootstrap.ResultCode] = ...
    AndroidABINotFound: ClassVar[importlib._bootstrap.ResultCode] = ...
    AndroidAPKFolderNotFound: ClassVar[importlib._bootstrap.ResultCode] = ...
    AndroidAPKInstallFailed: ClassVar[importlib._bootstrap.ResultCode] = ...
    AndroidAPKVerifyFailed: ClassVar[importlib._bootstrap.ResultCode] = ...
    AndroidGrantPermissionsFailed: ClassVar[importlib._bootstrap.ResultCode] = ...
    CompressionFailed: ClassVar[importlib._bootstrap.ResultCode] = ...
    DataNotAvailable: ClassVar[importlib._bootstrap.ResultCode] = ...
    FileCorrupted: ClassVar[importlib._bootstrap.ResultCode] = ...
    FileIOFailed: ClassVar[importlib._bootstrap.ResultCode] = ...
    FileIncompatibleVersion: ClassVar[importlib._bootstrap.ResultCode] = ...
    FileNotFound: ClassVar[importlib._bootstrap.ResultCode] = ...
    ImageUnsupported: ClassVar[importlib._bootstrap.ResultCode] = ...
    IncompatibleProcess: ClassVar[importlib._bootstrap.ResultCode] = ...
    InjectionFailed: ClassVar[importlib._bootstrap.ResultCode] = ...
    InternalError: ClassVar[importlib._bootstrap.ResultCode] = ...
    InvalidParameter: ClassVar[importlib._bootstrap.ResultCode] = ...
    JDWPFailure: ClassVar[importlib._bootstrap.ResultCode] = ...
    NetworkIOFailed: ClassVar[importlib._bootstrap.ResultCode] = ...
    NetworkRemoteBusy: ClassVar[importlib._bootstrap.ResultCode] = ...
    NetworkVersionMismatch: ClassVar[importlib._bootstrap.ResultCode] = ...
    RemoteServerConnectionLost: ClassVar[importlib._bootstrap.ResultCode] = ...
    ReplayDeviceLost: ClassVar[importlib._bootstrap.ResultCode] = ...
    ReplayOutOfMemory: ClassVar[importlib._bootstrap.ResultCode] = ...
    Succeeded: ClassVar[importlib._bootstrap.ResultCode] = ...
    UnknownError: ClassVar[importlib._bootstrap.ResultCode] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class ResultDetails(SwigPyObject):
    code: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Message(self) -> Any: ...
    def OK(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __nonzero__(self) -> Any: ...

class SDBasic(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Array: ClassVar[importlib._bootstrap.SDBasic] = ...
    Boolean: ClassVar[importlib._bootstrap.SDBasic] = ...
    Buffer: ClassVar[importlib._bootstrap.SDBasic] = ...
    Character: ClassVar[importlib._bootstrap.SDBasic] = ...
    Chunk: ClassVar[importlib._bootstrap.SDBasic] = ...
    Enum: ClassVar[importlib._bootstrap.SDBasic] = ...
    Float: ClassVar[importlib._bootstrap.SDBasic] = ...
    Null: ClassVar[importlib._bootstrap.SDBasic] = ...
    Resource: ClassVar[importlib._bootstrap.SDBasic] = ...
    SignedInteger: ClassVar[importlib._bootstrap.SDBasic] = ...
    String: ClassVar[importlib._bootstrap.SDBasic] = ...
    Struct: ClassVar[importlib._bootstrap.SDBasic] = ...
    UnsignedInteger: ClassVar[importlib._bootstrap.SDBasic] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class SDChunk(SDObject):
    metadata: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Duplicate(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class SDChunkFlags(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    HasCallstack: ClassVar[importlib._bootstrap.SDChunkFlags] = ...
    NoFlags: ClassVar[importlib._bootstrap.SDChunkFlags] = ...
    OpaqueChunk: ClassVar[importlib._bootstrap.SDChunkFlags] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class SDChunkMetaData(SwigPyObject):
    callstack: Any
    chunkID: Any
    durationMicro: Any
    flags: Any
    length: Any
    this: Any
    thisown: Any
    threadID: Any
    timestampMicro: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class SDFile(SwigPyObject):
    buffers: Any
    chunks: Any
    this: Any
    thisown: Any
    version: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Swap(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class SDObject(SwigPyObject):
    data: Any
    name: Any
    this: Any
    thisown: Any
    type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def AddChild(self, child) -> Any: ...
    def AsBool(self) -> Any: ...
    def AsFloat(self) -> Any: ...
    def AsInt(self) -> Any: ...
    def AsResourceId(self) -> Any: ...
    def AsString(self) -> Any: ...
    def DeleteChildren(self) -> Any: ...
    def Duplicate(self) -> Any: ...
    def FindChild(self, childName) -> Any: ...
    def FindChildRecursively(self, childName) -> Any: ...
    def GetChild(self, index) -> Any: ...
    def GetParent(self) -> Any: ...
    def HasEqualValue(self, obj) -> Any: ...
    def NumChildren(self) -> Any: ...
    def RemoveChild(self, index) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class SDObjectData(SwigPyObject):
    basic: Any
    string: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class SDObjectPODData(SwigPyObject):
    b: Any
    c: Any
    d: Any
    i: Any
    id: Any
    this: Any
    thisown: Any
    u: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class SDType(SwigPyObject):
    basetype: Any
    byteSize: Any
    flags: Any
    name: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class SDTypeFlags(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    FixedArray: ClassVar[importlib._bootstrap.SDTypeFlags] = ...
    HasCustomString: ClassVar[importlib._bootstrap.SDTypeFlags] = ...
    Hidden: ClassVar[importlib._bootstrap.SDTypeFlags] = ...
    HiddenChildren: ClassVar[importlib._bootstrap.SDTypeFlags] = ...
    Important: ClassVar[importlib._bootstrap.SDTypeFlags] = ...
    ImportantChildren: ClassVar[importlib._bootstrap.SDTypeFlags] = ...
    NoFlags: ClassVar[importlib._bootstrap.SDTypeFlags] = ...
    NullString: ClassVar[importlib._bootstrap.SDTypeFlags] = ...
    Nullable: ClassVar[importlib._bootstrap.SDTypeFlags] = ...
    Union: ClassVar[importlib._bootstrap.SDTypeFlags] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class SamplerBindStats(SwigPyObject):
    bindslots: Any
    calls: Any
    nulls: Any
    sets: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class Scissor(SwigPyObject):
    enabled: Any
    height: Any
    this: Any
    thisown: Any
    width: Any
    x: Any
    y: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class SectionFlags(enum.IntFlag):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    ASCIIStored: ClassVar[importlib._bootstrap.SectionFlags] = ...
    LZ4Compressed: ClassVar[importlib._bootstrap.SectionFlags] = ...
    NoFlags: ClassVar[importlib._bootstrap.SectionFlags] = ...
    ZstdCompressed: ClassVar[importlib._bootstrap.SectionFlags] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class SectionProperties(SwigPyObject):
    compressedSize: Any
    flags: Any
    name: Any
    this: Any
    thisown: Any
    type: Any
    uncompressedSize: Any
    version: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class SectionType(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    AMDRGPProfile: ClassVar[importlib._bootstrap.SectionType] = ...
    Bookmarks: ClassVar[importlib._bootstrap.SectionType] = ...
    Count: ClassVar[importlib._bootstrap.SectionType] = ...
    D3D12Core: ClassVar[importlib._bootstrap.SectionType] = ...
    D3D12SDKLayers: ClassVar[importlib._bootstrap.SectionType] = ...
    EditedShaders: ClassVar[importlib._bootstrap.SectionType] = ...
    EmbeddedLogfile: ClassVar[importlib._bootstrap.SectionType] = ...
    ExtendedThumbnail: ClassVar[importlib._bootstrap.SectionType] = ...
    First: ClassVar[importlib._bootstrap.SectionType] = ...
    FrameCapture: ClassVar[importlib._bootstrap.SectionType] = ...
    Notes: ClassVar[importlib._bootstrap.SectionType] = ...
    ResolveDatabase: ClassVar[importlib._bootstrap.SectionType] = ...
    ResourceRenames: ClassVar[importlib._bootstrap.SectionType] = ...
    Unknown: ClassVar[importlib._bootstrap.SectionType] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class ShaderBindpointMapping(SwigPyObject):
    constantBlocks: Any
    inputAttributes: Any
    readOnlyResources: Any
    readWriteResources: Any
    samplers: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderBuiltin(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Barycentrics: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    BaseInstance: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    BaseVertex: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    ClipDistance: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    ColorOutput: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    Count: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    CullDistance: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    CullPrimitive: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    DepthOutput: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    DepthOutputGreaterEqual: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    DepthOutputLessEqual: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    DeviceIndex: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    DispatchSize: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    DispatchThreadIndex: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    DomainLocation: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    DrawIndex: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    First: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    FragAreaSize: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    FragInvocationCount: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    GSInstanceIndex: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    GroupFlatIndex: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    GroupIndex: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    GroupSize: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    GroupThreadIndex: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    IndexInSubgroup: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    InsideTessFactor: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    InstanceIndex: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    IsFrontFace: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    IsFullyCovered: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    IsHelper: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    MSAACoverage: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    MSAASampleIndex: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    MSAASamplePosition: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    NumSubgroups: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    OuterTessFactor: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    OutputControlPointIndex: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    PackedFragRate: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    PatchNumVertices: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    PointCoord: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    PointSize: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    Position: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    PrimitiveIndex: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    RTIndex: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    StencilReference: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    SubgroupEqualMask: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    SubgroupGreaterEqualMask: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    SubgroupGreaterMask: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    SubgroupIndexInWorkgroup: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    SubgroupLessEqualMask: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    SubgroupLessMask: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    SubgroupSize: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    Undefined: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    VertexIndex: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    ViewportIndex: ClassVar[importlib._bootstrap.ShaderBuiltin] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class ShaderChangeStats(SwigPyObject):
    calls: Any
    nulls: Any
    redundants: Any
    sets: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderCompileFlag(SwigPyObject):
    name: Any
    this: Any
    thisown: Any
    value: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderCompileFlags(SwigPyObject):
    flags: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderComputeMessageLocation(SwigPyObject):
    this: Any
    thisown: Any
    thread: Any
    workgroup: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderConstant(SwigPyObject):
    bitFieldOffset: Any
    bitFieldSize: Any
    byteOffset: Any
    defaultValue: Any
    name: Any
    this: Any
    thisown: Any
    type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderConstantType(SwigPyObject):
    arrayByteStride: Any
    baseType: Any
    columns: Any
    elements: Any
    flags: Any
    matrixByteStride: Any
    members: Any
    name: Any
    pointerTypeID: Any
    rows: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def ColMajor(self) -> Any: ...
    def RowMajor(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderDebugInfo(SwigPyObject):
    compileFlags: Any
    compiler: Any
    debugStatus: Any
    debuggable: Any
    editBaseFile: Any
    encoding: Any
    entryLocation: Any
    files: Any
    sourceDebugInformation: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderDebugState(SwigPyObject):
    callstack: Any
    changes: Any
    flags: Any
    nextInstruction: Any
    stepIndex: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderDebugTrace(SwigPyObject):
    constantBlocks: Any
    debugger: Any
    inputs: Any
    instInfo: Any
    readOnlyResources: Any
    readWriteResources: Any
    samplers: Any
    sourceVars: Any
    stage: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderDebugger(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderEncoding(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Count: ClassVar[importlib._bootstrap.ShaderEncoding] = ...
    DXBC: ClassVar[importlib._bootstrap.ShaderEncoding] = ...
    DXIL: ClassVar[importlib._bootstrap.ShaderEncoding] = ...
    First: ClassVar[importlib._bootstrap.ShaderEncoding] = ...
    GLSL: ClassVar[importlib._bootstrap.ShaderEncoding] = ...
    HLSL: ClassVar[importlib._bootstrap.ShaderEncoding] = ...
    OpenGLSPIRV: ClassVar[importlib._bootstrap.ShaderEncoding] = ...
    OpenGLSPIRVAsm: ClassVar[importlib._bootstrap.ShaderEncoding] = ...
    SPIRV: ClassVar[importlib._bootstrap.ShaderEncoding] = ...
    SPIRVAsm: ClassVar[importlib._bootstrap.ShaderEncoding] = ...
    Unknown: ClassVar[importlib._bootstrap.ShaderEncoding] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class ShaderEntryPoint(SwigPyObject):
    name: Any
    stage: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderEvents(enum.IntFlag):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    GeneratedNanOrInf: ClassVar[importlib._bootstrap.ShaderEvents] = ...
    NoEvent: ClassVar[importlib._bootstrap.ShaderEvents] = ...
    SampleLoadGather: ClassVar[importlib._bootstrap.ShaderEvents] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class ShaderGeometryMessageLocation(SwigPyObject):
    primitive: Any
    this: Any
    thisown: Any
    view: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderMessage(SwigPyObject):
    disassemblyLine: Any
    location: Any
    message: Any
    stage: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderMessageLocation(SwigPyObject):
    compute: Any
    geometry: Any
    pixel: Any
    this: Any
    thisown: Any
    vertex: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderPixelMessageLocation(SwigPyObject):
    NoLocation: ClassVar[int] = ...
    primitive: Any
    sample: Any
    this: Any
    thisown: Any
    view: Any
    x: Any
    y: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderReflection(SwigPyObject):
    constantBlocks: Any
    debugInfo: Any
    dispatchThreadsDimension: Any
    encoding: Any
    entryPoint: Any
    inputSignature: Any
    interfaces: Any
    outputSignature: Any
    pointerTypes: Any
    rawBytes: Any
    readOnlyResources: Any
    readWriteResources: Any
    resourceId: Any
    samplers: Any
    stage: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderResource(SwigPyObject):
    bindPoint: Any
    isReadOnly: Any
    isTexture: Any
    name: Any
    resType: Any
    this: Any
    thisown: Any
    variableType: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderSampler(SwigPyObject):
    bindPoint: Any
    name: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderSourceFile(SwigPyObject):
    contents: Any
    filename: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderSourcePrefix(SwigPyObject):
    encoding: Any
    prefix: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderStage(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Compute: ClassVar[importlib._bootstrap.ShaderStage] = ...
    Count: ClassVar[importlib._bootstrap.ShaderStage] = ...
    Domain: ClassVar[importlib._bootstrap.ShaderStage] = ...
    First: ClassVar[importlib._bootstrap.ShaderStage] = ...
    Fragment: ClassVar[importlib._bootstrap.ShaderStage] = ...
    Geometry: ClassVar[importlib._bootstrap.ShaderStage] = ...
    Hull: ClassVar[importlib._bootstrap.ShaderStage] = ...
    Pixel: ClassVar[importlib._bootstrap.ShaderStage] = ...
    Tess_Control: ClassVar[importlib._bootstrap.ShaderStage] = ...
    Tess_Eval: ClassVar[importlib._bootstrap.ShaderStage] = ...
    Vertex: ClassVar[importlib._bootstrap.ShaderStage] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class ShaderStageMask(enum.IntFlag):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    All: ClassVar[importlib._bootstrap.ShaderStageMask] = ...
    Compute: ClassVar[importlib._bootstrap.ShaderStageMask] = ...
    Domain: ClassVar[importlib._bootstrap.ShaderStageMask] = ...
    Fragment: ClassVar[importlib._bootstrap.ShaderStageMask] = ...
    Geometry: ClassVar[importlib._bootstrap.ShaderStageMask] = ...
    Hull: ClassVar[importlib._bootstrap.ShaderStageMask] = ...
    Pixel: ClassVar[importlib._bootstrap.ShaderStageMask] = ...
    Tess_Control: ClassVar[importlib._bootstrap.ShaderStageMask] = ...
    Tess_Eval: ClassVar[importlib._bootstrap.ShaderStageMask] = ...
    Unknown: ClassVar[importlib._bootstrap.ShaderStageMask] = ...
    Vertex: ClassVar[importlib._bootstrap.ShaderStageMask] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class ShaderValue(SwigPyObject):
    f16v: Any
    f32v: Any
    f64v: Any
    s16v: Any
    s32v: Any
    s64v: Any
    s8v: Any
    this: Any
    thisown: Any
    u16v: Any
    u32v: Any
    u64v: Any
    u8v: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderVariable(SwigPyObject):
    columns: Any
    flags: Any
    members: Any
    name: Any
    rows: Any
    this: Any
    thisown: Any
    type: Any
    value: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def ColMajor(self) -> Any: ...
    def GetBinding(self) -> Any: ...
    def GetPointer(self) -> Any: ...
    def RowMajor(self) -> Any: ...
    def SetBinding(self, bindset, bind, arrayIndex) -> Any: ...
    def SetTypedPointer(self, pointer, shader, pointerTypeID) -> Any: ...
    def SetTypelessPointer(self, pointer) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderVariableChange(SwigPyObject):
    after: Any
    before: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderVariableFlags(enum.IntFlag):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    BinaryDisplay: ClassVar[importlib._bootstrap.ShaderVariableFlags] = ...
    HexDisplay: ClassVar[importlib._bootstrap.ShaderVariableFlags] = ...
    NoFlags: ClassVar[importlib._bootstrap.ShaderVariableFlags] = ...
    R10G10B10A2: ClassVar[importlib._bootstrap.ShaderVariableFlags] = ...
    R11G11B10: ClassVar[importlib._bootstrap.ShaderVariableFlags] = ...
    RGBDisplay: ClassVar[importlib._bootstrap.ShaderVariableFlags] = ...
    RowMajorMatrix: ClassVar[importlib._bootstrap.ShaderVariableFlags] = ...
    SNorm: ClassVar[importlib._bootstrap.ShaderVariableFlags] = ...
    Truncated: ClassVar[importlib._bootstrap.ShaderVariableFlags] = ...
    UNorm: ClassVar[importlib._bootstrap.ShaderVariableFlags] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class ShaderVertexMessageLocation(SwigPyObject):
    instance: Any
    this: Any
    thisown: Any
    vertexIndex: Any
    view: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShadingRateCombiner(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Keep: ClassVar[importlib._bootstrap.ShadingRateCombiner] = ...
    Max: ClassVar[importlib._bootstrap.ShadingRateCombiner] = ...
    Min: ClassVar[importlib._bootstrap.ShadingRateCombiner] = ...
    Multiply: ClassVar[importlib._bootstrap.ShadingRateCombiner] = ...
    Override: ClassVar[importlib._bootstrap.ShadingRateCombiner] = ...
    Passthrough: ClassVar[importlib._bootstrap.ShadingRateCombiner] = ...
    Replace: ClassVar[importlib._bootstrap.ShadingRateCombiner] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class SigParameter(SwigPyObject):
    NoIndex: ClassVar[int] = ...
    channelUsedMask: Any
    compCount: Any
    needSemanticIndex: Any
    regChannelMask: Any
    regIndex: Any
    semanticIdxName: Any
    semanticIndex: Any
    semanticName: Any
    stream: Any
    systemValue: Any
    this: Any
    thisown: Any
    varName: Any
    varType: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class SolidShade(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Count: ClassVar[importlib._bootstrap.SolidShade] = ...
    Lit: ClassVar[importlib._bootstrap.SolidShade] = ...
    NoSolid: ClassVar[importlib._bootstrap.SolidShade] = ...
    Secondary: ClassVar[importlib._bootstrap.SolidShade] = ...
    Solid: ClassVar[importlib._bootstrap.SolidShade] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class SourceVariableMapping(SwigPyObject):
    columns: Any
    name: Any
    offset: Any
    rows: Any
    signatureIndex: Any
    this: Any
    thisown: Any
    type: Any
    variables: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class StencilFace(SwigPyObject):
    compareMask: Any
    depthFailOperation: Any
    failOperation: Any
    function: Any
    passOperation: Any
    reference: Any
    this: Any
    thisown: Any
    writeMask: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class StencilOperation(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    DecSat: ClassVar[importlib._bootstrap.StencilOperation] = ...
    DecWrap: ClassVar[importlib._bootstrap.StencilOperation] = ...
    IncSat: ClassVar[importlib._bootstrap.StencilOperation] = ...
    IncWrap: ClassVar[importlib._bootstrap.StencilOperation] = ...
    Invert: ClassVar[importlib._bootstrap.StencilOperation] = ...
    Keep: ClassVar[importlib._bootstrap.StencilOperation] = ...
    Replace: ClassVar[importlib._bootstrap.StencilOperation] = ...
    Zero: ClassVar[importlib._bootstrap.StencilOperation] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class StructuredBufferList(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def remove(self, item) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class StructuredChunkList(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def remove(self, item) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class StructuredObjectList(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def remove(self, item) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class Subresource(SwigPyObject):
    mip: Any
    sample: Any
    slice: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class TargetControl(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Connected(self) -> Any: ...
    def CopyCapture(self, captureId, localpath) -> Any: ...
    def CycleActiveWindow(self) -> Any: ...
    def DeleteCapture(self, captureId) -> Any: ...
    def GetAPI(self) -> Any: ...
    def GetBusyClient(self) -> Any: ...
    def GetPID(self) -> Any: ...
    def GetTarget(self) -> Any: ...
    def QueueCapture(self, frameNumber, numFrames) -> Any: ...
    def ReceiveMessage(self, progress) -> Any: ...
    def Shutdown(self) -> Any: ...
    def TriggerCapture(self, numFrames) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class TargetControlMessage(SwigPyObject):
    apiUse: Any
    busy: Any
    capProgress: Any
    capturableWindowCount: Any
    newCapture: Any
    newChild: Any
    this: Any
    thisown: Any
    type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class TargetControlMessageType(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Busy: ClassVar[importlib._bootstrap.TargetControlMessageType] = ...
    CapturableWindowCount: ClassVar[importlib._bootstrap.TargetControlMessageType] = ...
    CaptureCopied: ClassVar[importlib._bootstrap.TargetControlMessageType] = ...
    CaptureProgress: ClassVar[importlib._bootstrap.TargetControlMessageType] = ...
    Disconnected: ClassVar[importlib._bootstrap.TargetControlMessageType] = ...
    NewCapture: ClassVar[importlib._bootstrap.TargetControlMessageType] = ...
    NewChild: ClassVar[importlib._bootstrap.TargetControlMessageType] = ...
    Noop: ClassVar[importlib._bootstrap.TargetControlMessageType] = ...
    RegisterAPI: ClassVar[importlib._bootstrap.TargetControlMessageType] = ...
    RequestShow: ClassVar[importlib._bootstrap.TargetControlMessageType] = ...
    Unknown: ClassVar[importlib._bootstrap.TargetControlMessageType] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class TextureCategory(enum.IntFlag):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    ColorTarget: ClassVar[importlib._bootstrap.TextureCategory] = ...
    DepthTarget: ClassVar[importlib._bootstrap.TextureCategory] = ...
    NoFlags: ClassVar[importlib._bootstrap.TextureCategory] = ...
    ShaderRead: ClassVar[importlib._bootstrap.TextureCategory] = ...
    ShaderReadWrite: ClassVar[importlib._bootstrap.TextureCategory] = ...
    SwapBuffer: ClassVar[importlib._bootstrap.TextureCategory] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class TextureComponentMapping(SwigPyObject):
    blackPoint: Any
    this: Any
    thisown: Any
    whitePoint: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class TextureDescription(SwigPyObject):
    arraysize: Any
    byteSize: Any
    creationFlags: Any
    cubemap: Any
    depth: Any
    dimension: Any
    format: Any
    height: Any
    mips: Any
    msQual: Any
    msSamp: Any
    resourceId: Any
    this: Any
    thisown: Any
    type: Any
    width: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class TextureDisplay(SwigPyObject):
    ResolveSamples: ClassVar[int] = ...
    alpha: Any
    backgroundColor: Any
    blue: Any
    customShaderId: Any
    decodeYUV: Any
    flipY: Any
    green: Any
    hdrMultiplier: Any
    linearDisplayAsGamma: Any
    overlay: Any
    rangeMax: Any
    rangeMin: Any
    rawOutput: Any
    red: Any
    resourceId: Any
    scale: Any
    subresource: Any
    this: Any
    thisown: Any
    typeCast: Any
    xOffset: Any
    yOffset: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class TextureFilter(SwigPyObject):
    filter: Any
    magnify: Any
    minify: Any
    mip: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class TextureSampleMapping(SwigPyObject):
    ResolveSamples: ClassVar[int] = ...
    mapToArray: Any
    sampleIndex: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class TextureSave(SwigPyObject):
    alpha: Any
    alphaCol: Any
    channelExtract: Any
    comp: Any
    destType: Any
    jpegQuality: Any
    mip: Any
    resourceId: Any
    sample: Any
    slice: Any
    this: Any
    thisown: Any
    typeCast: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class TextureSliceMapping(SwigPyObject):
    cubeCruciform: Any
    sliceGridWidth: Any
    sliceIndex: Any
    slicesAsGrid: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class TextureSwizzle(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Alpha: ClassVar[importlib._bootstrap.TextureSwizzle] = ...
    Blue: ClassVar[importlib._bootstrap.TextureSwizzle] = ...
    Green: ClassVar[importlib._bootstrap.TextureSwizzle] = ...
    One: ClassVar[importlib._bootstrap.TextureSwizzle] = ...
    Red: ClassVar[importlib._bootstrap.TextureSwizzle] = ...
    Zero: ClassVar[importlib._bootstrap.TextureSwizzle] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class TextureSwizzle4(SwigPyObject):
    alpha: Any
    blue: Any
    green: Any
    red: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class TextureType(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Buffer: ClassVar[importlib._bootstrap.TextureType] = ...
    Count: ClassVar[importlib._bootstrap.TextureType] = ...
    First: ClassVar[importlib._bootstrap.TextureType] = ...
    Texture1D: ClassVar[importlib._bootstrap.TextureType] = ...
    Texture1DArray: ClassVar[importlib._bootstrap.TextureType] = ...
    Texture2D: ClassVar[importlib._bootstrap.TextureType] = ...
    Texture2DArray: ClassVar[importlib._bootstrap.TextureType] = ...
    Texture2DMS: ClassVar[importlib._bootstrap.TextureType] = ...
    Texture2DMSArray: ClassVar[importlib._bootstrap.TextureType] = ...
    Texture3D: ClassVar[importlib._bootstrap.TextureType] = ...
    TextureCube: ClassVar[importlib._bootstrap.TextureType] = ...
    TextureCubeArray: ClassVar[importlib._bootstrap.TextureType] = ...
    TextureRect: ClassVar[importlib._bootstrap.TextureType] = ...
    Unknown: ClassVar[importlib._bootstrap.TextureType] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class Thumbnail(SwigPyObject):
    data: Any
    height: Any
    this: Any
    thisown: Any
    type: Any
    width: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class Topology(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    LineList: ClassVar[importlib._bootstrap.Topology] = ...
    LineList_Adj: ClassVar[importlib._bootstrap.Topology] = ...
    LineLoop: ClassVar[importlib._bootstrap.Topology] = ...
    LineStrip: ClassVar[importlib._bootstrap.Topology] = ...
    LineStrip_Adj: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_10CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_11CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_12CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_13CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_14CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_15CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_16CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_17CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_18CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_19CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_1CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_20CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_21CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_22CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_23CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_24CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_25CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_26CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_27CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_28CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_29CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_2CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_30CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_31CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_32CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_3CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_4CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_5CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_6CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_7CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_8CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PatchList_9CPs: ClassVar[importlib._bootstrap.Topology] = ...
    PointList: ClassVar[importlib._bootstrap.Topology] = ...
    TriangleFan: ClassVar[importlib._bootstrap.Topology] = ...
    TriangleList: ClassVar[importlib._bootstrap.Topology] = ...
    TriangleList_Adj: ClassVar[importlib._bootstrap.Topology] = ...
    TriangleStrip: ClassVar[importlib._bootstrap.Topology] = ...
    TriangleStrip_Adj: ClassVar[importlib._bootstrap.Topology] = ...
    Unknown: ClassVar[importlib._bootstrap.Topology] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class Uuid(SwigPyObject):
    this: Any
    thisown: Any
    words: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKAttachment(SwigPyObject):
    firstMip: Any
    firstSlice: Any
    imageResourceId: Any
    numMips: Any
    numSlices: Any
    swizzle: Any
    this: Any
    thisown: Any
    viewFormat: Any
    viewResourceId: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKBindingElement(SwigPyObject):
    addressU: Any
    addressV: Any
    addressW: Any
    borderColor: Any
    byteOffset: Any
    byteSize: Any
    chromaFilter: Any
    compareFunction: Any
    dynamicallyUsed: Any
    filter: Any
    firstMip: Any
    firstSlice: Any
    forceExplicitReconstruction: Any
    immutableSampler: Any
    inlineBlock: Any
    maxAnisotropy: Any
    maxLOD: Any
    minLOD: Any
    mipBias: Any
    numMips: Any
    numSlices: Any
    resourceResourceId: Any
    samplerResourceId: Any
    samplerSwizzle: Any
    seamless: Any
    srgbBorder: Any
    swizzle: Any
    this: Any
    thisown: Any
    type: Any
    unnormalized: Any
    viewFormat: Any
    viewResourceId: Any
    xChromaOffset: Any
    yChromaOffset: Any
    ycbcrModel: Any
    ycbcrRange: Any
    ycbcrSampler: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def UseBorder(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKColorBlendState(SwigPyObject):
    alphaToCoverageEnable: Any
    alphaToOneEnable: Any
    blendFactor: Any
    blends: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKConditionalRendering(SwigPyObject):
    bufferId: Any
    byteOffset: Any
    isInverted: Any
    isPassing: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKCurrentPass(SwigPyObject):
    framebuffer: Any
    renderArea: Any
    renderpass: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKDepthStencil(SwigPyObject):
    backFace: Any
    depthBoundsEnable: Any
    depthFunction: Any
    depthTestEnable: Any
    depthWriteEnable: Any
    frontFace: Any
    maxDepthBounds: Any
    minDepthBounds: Any
    stencilTestEnable: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKDescriptorBinding(SwigPyObject):
    binds: Any
    descriptorCount: Any
    dynamicallyUsedCount: Any
    firstUsedIndex: Any
    lastUsedIndex: Any
    stageFlags: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKDescriptorSet(SwigPyObject):
    bindings: Any
    descriptorSetResourceId: Any
    inlineData: Any
    layoutResourceId: Any
    pushDescriptor: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKFramebuffer(SwigPyObject):
    attachments: Any
    height: Any
    layers: Any
    resourceId: Any
    this: Any
    thisown: Any
    width: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKImageData(SwigPyObject):
    layouts: Any
    resourceId: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKImageLayout(SwigPyObject):
    baseLayer: Any
    baseMip: Any
    name: Any
    numLayer: Any
    numMip: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKIndexBuffer(SwigPyObject):
    byteOffset: Any
    byteStride: Any
    resourceId: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKInputAssembly(SwigPyObject):
    indexBuffer: Any
    primitiveRestartEnable: Any
    this: Any
    thisown: Any
    topology: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKMultiSample(SwigPyObject):
    minSampleShading: Any
    rasterSamples: Any
    sampleLocations: Any
    sampleMask: Any
    sampleShadingEnable: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKPipeline(SwigPyObject):
    descriptorSets: Any
    flags: Any
    pipelineComputeLayoutResourceId: Any
    pipelineFragmentLayoutResourceId: Any
    pipelinePreRastLayoutResourceId: Any
    pipelineResourceId: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKRasterizer(SwigPyObject):
    conservativeRasterization: Any
    cullMode: Any
    depthBias: Any
    depthBiasClamp: Any
    depthBiasEnable: Any
    depthClampEnable: Any
    depthClipEnable: Any
    extraPrimitiveOverestimationSize: Any
    fillMode: Any
    frontCCW: Any
    lineRasterMode: Any
    lineStippleFactor: Any
    lineStipplePattern: Any
    lineWidth: Any
    pipelineShadingRate: Any
    rasterizerDiscardEnable: Any
    shadingRateCombiners: Any
    slopeScaledDepthBias: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKRenderArea(SwigPyObject):
    height: Any
    this: Any
    thisown: Any
    width: Any
    x: Any
    y: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKRenderPass(SwigPyObject):
    colorAttachments: Any
    depthstencilAttachment: Any
    depthstencilResolveAttachment: Any
    dynamic: Any
    feedbackLoop: Any
    fragmentDensityAttachment: Any
    fragmentDensityOffsets: Any
    inputAttachments: Any
    multiviews: Any
    resolveAttachments: Any
    resourceId: Any
    shadingRateAttachment: Any
    shadingRateTexelSize: Any
    subpass: Any
    suspended: Any
    this: Any
    thisown: Any
    tileOnlyMSAASampleCount: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKSampleLocations(SwigPyObject):
    customLocations: Any
    gridHeight: Any
    gridWidth: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKShader(SwigPyObject):
    bindpointMapping: Any
    entryPoint: Any
    pushConstantRangeByteOffset: Any
    pushConstantRangeByteSize: Any
    reflection: Any
    resourceId: Any
    specializationData: Any
    specializationIds: Any
    stage: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKState(SwigPyObject):
    colorBlend: Any
    compute: Any
    computeShader: Any
    conditionalRendering: Any
    currentPass: Any
    depthStencil: Any
    fragmentShader: Any
    geometryShader: Any
    graphics: Any
    images: Any
    inputAssembly: Any
    multisample: Any
    pushconsts: Any
    rasterizer: Any
    shaderMessages: Any
    tessControlShader: Any
    tessEvalShader: Any
    tessellation: Any
    this: Any
    thisown: Any
    transformFeedback: Any
    vertexInput: Any
    vertexShader: Any
    viewportScissor: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKTessellation(SwigPyObject):
    domainOriginUpperLeft: Any
    numControlPoints: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKTransformFeedback(SwigPyObject):
    buffers: Any
    rasterizedStream: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKVertexAttribute(SwigPyObject):
    binding: Any
    byteOffset: Any
    format: Any
    location: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKVertexBinding(SwigPyObject):
    instanceDivisor: Any
    perInstance: Any
    this: Any
    thisown: Any
    vertexBufferBinding: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKVertexBuffer(SwigPyObject):
    byteOffset: Any
    byteSize: Any
    byteStride: Any
    resourceId: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKVertexInput(SwigPyObject):
    attributes: Any
    bindings: Any
    this: Any
    thisown: Any
    vertexBuffers: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKViewState(SwigPyObject):
    depthNegativeOneToOne: Any
    discardRectangles: Any
    discardRectanglesExclusive: Any
    this: Any
    thisown: Any
    viewportScissors: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKViewportScissor(SwigPyObject):
    scissor: Any
    this: Any
    thisown: Any
    vp: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VKXFBBuffer(SwigPyObject):
    active: Any
    bufferResourceId: Any
    byteOffset: Any
    byteSize: Any
    counterBufferOffset: Any
    counterBufferResourceId: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VarType(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Bool: ClassVar[importlib._bootstrap.VarType] = ...
    ConstantBlock: ClassVar[importlib._bootstrap.VarType] = ...
    Double: ClassVar[importlib._bootstrap.VarType] = ...
    Enum: ClassVar[importlib._bootstrap.VarType] = ...
    Float: ClassVar[importlib._bootstrap.VarType] = ...
    GPUPointer: ClassVar[importlib._bootstrap.VarType] = ...
    Half: ClassVar[importlib._bootstrap.VarType] = ...
    ReadOnlyResource: ClassVar[importlib._bootstrap.VarType] = ...
    ReadWriteResource: ClassVar[importlib._bootstrap.VarType] = ...
    SByte: ClassVar[importlib._bootstrap.VarType] = ...
    SInt: ClassVar[importlib._bootstrap.VarType] = ...
    SLong: ClassVar[importlib._bootstrap.VarType] = ...
    SShort: ClassVar[importlib._bootstrap.VarType] = ...
    Sampler: ClassVar[importlib._bootstrap.VarType] = ...
    Struct: ClassVar[importlib._bootstrap.VarType] = ...
    UByte: ClassVar[importlib._bootstrap.VarType] = ...
    UInt: ClassVar[importlib._bootstrap.VarType] = ...
    ULong: ClassVar[importlib._bootstrap.VarType] = ...
    UShort: ClassVar[importlib._bootstrap.VarType] = ...
    Unknown: ClassVar[importlib._bootstrap.VarType] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class VertexBindStats(SwigPyObject):
    bindslots: Any
    calls: Any
    nulls: Any
    sets: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VertexInputAttribute(SwigPyObject):
    byteOffset: Any
    floatCastWrong: Any
    format: Any
    genericEnabled: Any
    genericValue: Any
    instanceRate: Any
    name: Any
    perInstance: Any
    this: Any
    thisown: Any
    used: Any
    vertexBuffer: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class Viewport(SwigPyObject):
    enabled: Any
    height: Any
    maxDepth: Any
    minDepth: Any
    this: Any
    thisown: Any
    width: Any
    x: Any
    y: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class VulkanLayerFlags(enum.IntFlag):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    NeedElevation: ClassVar[importlib._bootstrap.VulkanLayerFlags] = ...
    NoFlags: ClassVar[importlib._bootstrap.VulkanLayerFlags] = ...
    OtherInstallsRegistered: ClassVar[importlib._bootstrap.VulkanLayerFlags] = ...
    RegisterAll: ClassVar[importlib._bootstrap.VulkanLayerFlags] = ...
    ThisInstallRegistered: ClassVar[importlib._bootstrap.VulkanLayerFlags] = ...
    Unfixable: ClassVar[importlib._bootstrap.VulkanLayerFlags] = ...
    Unsupported: ClassVar[importlib._bootstrap.VulkanLayerFlags] = ...
    UpdateAllowed: ClassVar[importlib._bootstrap.VulkanLayerFlags] = ...
    UserRegisterable: ClassVar[importlib._bootstrap.VulkanLayerFlags] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class VulkanLayerRegistrationInfo(SwigPyObject):
    flags: Any
    myJSONs: Any
    otherJSONs: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class WindowingData(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class WindowingSystem(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Android: ClassVar[importlib._bootstrap.WindowingSystem] = ...
    GGP: ClassVar[importlib._bootstrap.WindowingSystem] = ...
    Headless: ClassVar[importlib._bootstrap.WindowingSystem] = ...
    MacOS: ClassVar[importlib._bootstrap.WindowingSystem] = ...
    Unknown: ClassVar[importlib._bootstrap.WindowingSystem] = ...
    Wayland: ClassVar[importlib._bootstrap.WindowingSystem] = ...
    Win32: ClassVar[importlib._bootstrap.WindowingSystem] = ...
    XCB: ClassVar[importlib._bootstrap.WindowingSystem] = ...
    Xlib: ClassVar[importlib._bootstrap.WindowingSystem] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class YcbcrConversion(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    BT2020: ClassVar[importlib._bootstrap.YcbcrConversion] = ...
    BT601: ClassVar[importlib._bootstrap.YcbcrConversion] = ...
    BT709: ClassVar[importlib._bootstrap.YcbcrConversion] = ...
    RangeOnly: ClassVar[importlib._bootstrap.YcbcrConversion] = ...
    Raw: ClassVar[importlib._bootstrap.YcbcrConversion] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class YcbcrRange(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    ITUFull: ClassVar[importlib._bootstrap.YcbcrRange] = ...
    ITUNarrow: ClassVar[importlib._bootstrap.YcbcrRange] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class rdcarray_of_APIEvent(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_ActionDescription(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_Bindpoint(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_BoundResource(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_BoundResourceArray(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_BoundVBuffer(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_BufferDescription(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_CaptureFileFormat(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_ColorBlend(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_ConstantBindStats(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_ConstantBlock(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_CounterResult(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_D3D11Pipe_ConstantBuffer(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_D3D11Pipe_Layout(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_D3D11Pipe_Sampler(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_D3D11Pipe_StreamOutBind(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_D3D11Pipe_VertexBuffer(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_D3D11Pipe_View(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_D3D12Pipe_ConstantBuffer(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_D3D12Pipe_Layout(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_D3D12Pipe_ResourceData(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_D3D12Pipe_ResourceState(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_D3D12Pipe_RootSignatureRange(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_D3D12Pipe_Sampler(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_D3D12Pipe_StreamOutBind(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_D3D12Pipe_VertexBuffer(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_D3D12Pipe_View(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_DebugMessage(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_DebugVariableReference(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_EnvironmentModification(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_EventUsage(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_FloatVector(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_GLPipe_Attachment(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_GLPipe_Buffer(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_GLPipe_ImageLoadStore(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_GLPipe_Sampler(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_GLPipe_Texture(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_GLPipe_VertexAttribute(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_GLPipe_VertexBuffer(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_GPUCounter(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_GPUDevice(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_GraphicsAPI(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_InstructionSourceInfo(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_LineColumnInfo(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_Offset(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_PathEntry(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_PixelModification(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_ResourceBindStats(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_ResourceDescription(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_ResourceId(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_SamplerBindStats(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_Scissor(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_ShaderChangeStats(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_ShaderCompileFlag(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_ShaderConstant(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_ShaderConstantType(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_ShaderDebugState(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_ShaderEncoding(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_ShaderEntryPoint(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_ShaderMessage(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_ShaderResource(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_ShaderSampler(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_ShaderSourceFile(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_ShaderSourcePrefix(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_ShaderVariable(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_ShaderVariableChange(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_SigParameter(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_SourceVariableMapping(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_TextureDescription(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_VKPipe_Attachment(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_VKPipe_BindingElement(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_VKPipe_DescriptorBinding(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_VKPipe_DescriptorSet(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_VKPipe_ImageData(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_VKPipe_ImageLayout(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_VKPipe_RenderArea(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_VKPipe_VertexAttribute(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_VKPipe_VertexBinding(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_VKPipe_VertexBuffer(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_VKPipe_ViewportScissor(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_VKPipe_XFBBuffer(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_VertexInputAttribute(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_Viewport(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_WindowingSystem(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_float(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_int(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_rdcstr(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_uint32_t(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_uint64_t(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

def BecomeRemoteServer(listenhost, port, killReplay, previewWindow) -> Any: ...
def CBUsage(stage) -> Any: ...
def CanGlobalHook() -> Any: ...
def CheckAndroidPackage(URL, packageAndActivity, flags) -> Any: ...
def CheckRemoteServerConnection(URL) -> Any: ...
def CreateAndroidWindowingData(window) -> Any: ...
def CreateGgpWindowingData() -> Any: ...
def CreateHeadlessWindowingData(width, height) -> Any: ...
def CreateMacOSWindowingData(view, layer) -> Any: ...
def CreateRemoteServerConnection(URL) -> Any: ...
def CreateTargetControl(URL, ident, clientName, forceConnection) -> Any: ...
def CreateWaylandWindowingData(display, window) -> Any: ...
def CreateWin32WindowingData(window) -> Any: ...
def CreateXCBWindowingData(connection, window) -> Any: ...
def CreateXlibWindowingData(display, window) -> Any: ...
def DumpObject(obj) -> Any: ...
def EndSelfHostCapture(dllname) -> Any: ...
def EnumerateRemoteTargets(URL, nextIdent) -> Any: ...
def ExecuteAndInject(app, workingDir, cmdLine, env, capturefile, opts, waitForExit) -> Any: ...
def FloatToHalf(flt) -> Any: ...
def GPUVendorFromPCIVendor(vendorID) -> Any: ...
def GetCommitHash() -> Any: ...
def GetConfigSetting(name) -> Any: ...
def GetCurrentProcessMemoryUsage() -> Any: ...
def GetDefaultCaptureOptions() -> Any: ...
def GetDeviceProtocolController(protocol) -> Any: ...
def GetDriverInformation(api) -> Any: ...
def GetLogFile() -> Any: ...
def GetSupportedDeviceProtocols() -> Any: ...
def GetVersionString() -> Any: ...
def HalfToFloat(half) -> Any: ...
def InitCamera(type) -> Any: ...
def InitialiseReplay(globalEnv, args) -> Any: ...
def InjectIntoProcess(pid, env, capturefile, opts, waitForExit) -> Any: ...
def IsAMDCounter(c) -> Any: ...
def IsARMCounter(c) -> Any: ...
def IsD3D(api) -> Any: ...
def IsGenericCounter(c) -> Any: ...
def IsGlobalHookActive() -> Any: ...
def IsIntelCounter(c) -> Any: ...
def IsNvidiaCounter(c) -> Any: ...
def IsReleaseBuild() -> Any: ...
def IsStrip(topology) -> Any: ...
def IsTextRepresentation(encoding) -> Any: ...
def IsVulkanExtendedCounter(c) -> Any: ...
def LogMessage(type, project, file, line, text) -> Any: ...
def MaskForStage(stage) -> Any: ...
def NeedVulkanLayerRegistration(info) -> Any: ...
def NumVerticesPerPrimitive(topology) -> Any: ...
def OpenCaptureFile() -> Any: ...
def PatchList_Count(topology) -> Any: ...
def PatchList_Topology(N) -> Any: ...
def RWResUsage(stage) -> Any: ...
def ResUsage(stage) -> Any: ...
def ResourceId_Null() -> Any: ...
def SWIG_PyInstanceMethod_New(*args, **kwargs) -> Any: ...
def SaveConfigSettings() -> Any: ...
def SetColors(darkChecker, lightChecker, darkTheme) -> Any: ...
def SetConfigSetting(name) -> Any: ...
def SetDebugLogFile(filename) -> Any: ...
def ShutdownReplay() -> Any: ...
def StartGlobalHook(pathmatch, logfile, opts) -> Any: ...
def StartSelfHostCapture(dllname) -> Any: ...
def StopGlobalHook() -> Any: ...
def ToolExecutable(tool) -> Any: ...
def ToolInput(tool) -> Any: ...
def ToolOutput(tool) -> Any: ...
def UpdateVulkanLayerRegistration(systemLevel) -> Any: ...
def VarTypeByteSize(type) -> Any: ...
def VarTypeCompType(type) -> Any: ...
def VertexOffset(topology, primitive) -> Any: ...
def makeSDArray(name) -> Any: ...
def makeSDBool(name, val) -> Any: ...
def makeSDEnum(name, val) -> Any: ...
def makeSDFloat(name, val) -> Any: ...
def makeSDInt32(name, val) -> Any: ...
def makeSDInt64(name, val) -> Any: ...
def makeSDResourceId(name, val) -> Any: ...
def makeSDString(name, val) -> Any: ...
def makeSDStruct(name, structtype) -> Any: ...
def makeSDUInt32(name, val) -> Any: ...
def makeSDUInt64(name, val) -> Any: ...
