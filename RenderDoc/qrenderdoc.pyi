from typing import Any, ClassVar

from typing import overload
import collections
import enum
import importlib._bootstrap

# typedef struct {
#     PyObject_HEAD
#     void *ptr;
#     swig_type_info *ty;
#     int own;
#     PyObject *next;
#     PyObject *dict;
# } SwigPyObject;
class SwigPyObject:
    ptr: Any
    ty: Any
    own: Any
    next: Any
    dict: Any

class APIInspector(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Refresh(self) -> Any: ...
    def RevealParameter(self, param) -> Any: ...
    def Widget(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class BufferViewer(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def ScrollToColumn(self, column, stage) -> Any: ...
    @overload
    def ScrollToColumn(column) -> Any: ...
    @overload
    def ScrollToRow(self, row, stage) -> Any: ...
    @overload
    def ScrollToRow(row) -> Any: ...
    def SetCurrentInstance(self, instance) -> Any: ...
    def SetCurrentView(self, view) -> Any: ...
    def SetPreviewStage(self, stage) -> Any: ...
    def ShowMeshData(self, stage) -> Any: ...
    def Widget(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class BugReport(SwigPyObject):
    checkDate: Any
    reportId: Any
    submitDate: Any
    this: Any
    thisown: Any
    unreadUpdates: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def URL(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class CaptureContext(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def APIProps(self) -> Any: ...
    def AddCaptureViewer(self, viewer) -> Any: ...
    @overload
    def AddDockWindow(self, newWindow, ref, refWindow, percentage = ...) -> Any: ...
    @overload
    def AddDockWindow(newWindow, ref, refWindow) -> Any: ...
    def AddMessages(self, msgs) -> Any: ...
    def BuiltinWindowClosed(self, window) -> Any: ...
    def CloseCapture(self) -> Any: ...
    def Config(self) -> Any: ...
    def ConnectToRemoteServer(self, host) -> Any: ...
    def CreateBuiltinWindow(self, objectName) -> Any: ...
    def CreateWindowingData(self, window) -> Any: ...
    def CurAction(self) -> Any: ...
    def CurD3D11PipelineState(self) -> Any: ...
    def CurD3D12PipelineState(self) -> Any: ...
    def CurEvent(self) -> Any: ...
    def CurGLPipelineState(self) -> Any: ...
    def CurPipelineState(self) -> Any: ...
    def CurRootActions(self) -> Any: ...
    def CurSelectedAction(self) -> Any: ...
    def CurSelectedEvent(self) -> Any: ...
    def CurVulkanPipelineState(self) -> Any: ...
    def CurWindowingSystem(self) -> Any: ...
    def CustomShaderEncodings(self) -> Any: ...
    def CustomShaderSourcePrefixes(self) -> Any: ...
    def DebugMessages(self) -> Any: ...
    def DebugShader(self, bind, shader, pipeline, trace, debugContext) -> Any: ...
    def EditShader(self, id, stage, entryPoint, files, knownTool, shaderEncoding, flags, saveCallback, revertCallback) -> Any: ...
    def ExportCapture(self, fmt, exportfile) -> Any: ...
    def Extensions(self) -> Any: ...
    def FrameInfo(self) -> Any: ...
    def GetAPIInspector(self) -> Any: ...
    def GetAction(self, eventId) -> Any: ...
    def GetBookmarks(self) -> Any: ...
    def GetBuffer(self, id) -> Any: ...
    def GetBuffers(self) -> Any: ...
    def GetCaptureDialog(self) -> Any: ...
    def GetCaptureFilename(self) -> Any: ...
    def GetCaptureModifications(self) -> Any: ...
    def GetCommentView(self) -> Any: ...
    def GetDebugMessageView(self) -> Any: ...
    def GetDiagnosticLogView(self) -> Any: ...
    def GetEventBrowser(self) -> Any: ...
    def GetFatalError(self) -> Any: ...
    def GetFirstAction(self) -> Any: ...
    def GetLastAction(self) -> Any: ...
    def GetMainWindow(self) -> Any: ...
    def GetMeshPreview(self) -> Any: ...
    def GetNotes(self, key) -> Any: ...
    def GetPerformanceCounterViewer(self) -> Any: ...
    def GetPipelineViewer(self) -> Any: ...
    def GetPythonShell(self) -> Any: ...
    def GetRGPInterop(self) -> Any: ...
    def GetResource(self, id) -> Any: ...
    def GetResourceInspector(self) -> Any: ...
    def GetResourceName(self, id) -> Any: ...
    def GetResourceNameUnsuffixed(self, id) -> Any: ...
    def GetResourceReplacement(self, id) -> Any: ...
    def GetResources(self) -> Any: ...
    def GetStatisticsViewer(self) -> Any: ...
    def GetStructuredFile(self) -> Any: ...
    def GetTexture(self, id) -> Any: ...
    def GetTextureViewer(self) -> Any: ...
    def GetTextures(self) -> Any: ...
    def GetTimelineBar(self) -> Any: ...
    def HasAPIInspector(self) -> Any: ...
    def HasCaptureDialog(self) -> Any: ...
    def HasCommentView(self) -> Any: ...
    def HasDebugMessageView(self) -> Any: ...
    def HasDiagnosticLogView(self) -> Any: ...
    def HasEventBrowser(self) -> Any: ...
    def HasMeshPreview(self) -> Any: ...
    def HasPerformanceCounterViewer(self) -> Any: ...
    def HasPipelineViewer(self) -> Any: ...
    def HasPythonShell(self) -> Any: ...
    def HasResourceCustomName(self, id) -> Any: ...
    def HasResourceInspector(self) -> Any: ...
    def HasStatisticsViewer(self) -> Any: ...
    def HasTextureViewer(self) -> Any: ...
    def HasTimelineBar(self) -> Any: ...
    def ImportCapture(self, fmt, importfile, rdcfile) -> Any: ...
    def IsAutogeneratedName(self, id) -> Any: ...
    def IsCaptureLoaded(self) -> Any: ...
    def IsCaptureLoading(self) -> Any: ...
    def IsCaptureLocal(self) -> Any: ...
    def IsCaptureTemporary(self) -> Any: ...
    def IsResourceReplaced(self, id) -> Any: ...
    def LoadCapture(self, captureFile, opts, origFilename, temporary, local) -> Any: ...
    def MarkMessagesRead(self) -> Any: ...
    def OpenRGPProfile(self, filename) -> Any: ...
    def RaiseDockWindow(self, dockWindow) -> Any: ...
    def RecompressCapture(self) -> Any: ...
    def RefreshStatus(self) -> Any: ...
    def RegisterReplacement(self, arg2, to) -> Any: ...
    def RemoveBookmark(self, eventId) -> Any: ...
    def RemoveCaptureViewer(self, viewer) -> Any: ...
    def Replay(self) -> Any: ...
    def ResourceNameCacheID(self) -> Any: ...
    def SaveCaptureTo(self, captureFile) -> Any: ...
    def SetBookmark(self, mark) -> Any: ...
    @overload
    def SetEventID(self, exclude, selectedEventId, eventId, force = ...) -> Any: ...
    @overload
    def SetEventID(exclude, selectedEventId, eventId) -> Any: ...
    def SetNotes(self, key, contents) -> Any: ...
    def SetResourceCustomName(self, id, name) -> Any: ...
    def ShowAPIInspector(self) -> Any: ...
    def ShowCaptureDialog(self) -> Any: ...
    def ShowCommentView(self) -> Any: ...
    def ShowDebugMessageView(self) -> Any: ...
    def ShowDiagnosticLogView(self) -> Any: ...
    def ShowEventBrowser(self) -> Any: ...
    def ShowMeshPreview(self) -> Any: ...
    def ShowPerformanceCounterViewer(self) -> Any: ...
    def ShowPipelineViewer(self) -> Any: ...
    def ShowPythonShell(self) -> Any: ...
    def ShowResourceInspector(self) -> Any: ...
    def ShowStatisticsViewer(self) -> Any: ...
    def ShowTextureViewer(self) -> Any: ...
    def ShowTimelineBar(self) -> Any: ...
    def TargetShaderEncodings(self) -> Any: ...
    def TempCaptureFilename(self, appname) -> Any: ...
    def UnreadMessageCount(self) -> Any: ...
    def UnregisterReplacement(self, id) -> Any: ...
    @overload
    def ViewBuffer(self, byteOffset, byteSize, id, format) -> Any: ...
    @overload
    def ViewBuffer(byteOffset, byteSize, id) -> Any: ...
    def ViewConstantBuffer(self, stage, slot, idx) -> Any: ...
    def ViewPixelHistory(self, id, x, y, display) -> Any: ...
    def ViewShader(self, shader, pipeline) -> Any: ...
    def ViewShaderMessages(self, stages) -> Any: ...
    @overload
    def ViewTextureAsBuffer(self, id, sub, format) -> Any: ...
    @overload
    def ViewTextureAsBuffer(id, sub) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class CaptureDialog(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def IsInjectMode(self) -> Any: ...
    def LoadSettings(self, filename) -> Any: ...
    def SaveSettings(self, filename) -> Any: ...
    def SetCommandLine(self, cmd) -> Any: ...
    def SetEnvironmentModifications(self, modifications) -> Any: ...
    def SetExecutableFilename(self, filename) -> Any: ...
    def SetInjectMode(self, inject) -> Any: ...
    def SetSettings(self, settings) -> Any: ...
    def SetWorkingDirectory(self, dir) -> Any: ...
    def Settings(self) -> Any: ...
    def TriggerCapture(self) -> Any: ...
    def UpdateGlobalHook(self) -> Any: ...
    def UpdateRemoteHost(self) -> Any: ...
    def Widget(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class CaptureModifications(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    All: ClassVar[importlib._bootstrap.CaptureModifications] = ...
    Bookmarks: ClassVar[importlib._bootstrap.CaptureModifications] = ...
    EditedShaders: ClassVar[importlib._bootstrap.CaptureModifications] = ...
    NoModifications: ClassVar[importlib._bootstrap.CaptureModifications] = ...
    Notes: ClassVar[importlib._bootstrap.CaptureModifications] = ...
    Renames: ClassVar[importlib._bootstrap.CaptureModifications] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class CaptureSettings(SwigPyObject):
    autoStart: Any
    commandLine: Any
    environment: Any
    executable: Any
    inject: Any
    numQueuedFrames: Any
    options: Any
    queuedFrameCap: Any
    this: Any
    thisown: Any
    workingDir: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class CaptureViewer(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def OnCaptureClosed(self) -> Any: ...
    def OnCaptureLoaded(self) -> Any: ...
    def OnEventChanged(self, eventId) -> Any: ...
    def OnSelectedEventChanged(self, eventId) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class CommentView(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def GetComments(self) -> Any: ...
    def SetComments(self, text) -> Any: ...
    def Widget(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ContextMenu(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    EventBrowser_Event: ClassVar[importlib._bootstrap.ContextMenu] = ...
    MeshPreview_GSOutVertex: ClassVar[importlib._bootstrap.ContextMenu] = ...
    MeshPreview_VSInVertex: ClassVar[importlib._bootstrap.ContextMenu] = ...
    MeshPreview_VSOutVertex: ClassVar[importlib._bootstrap.ContextMenu] = ...
    MeshPreview_Vertex: ClassVar[importlib._bootstrap.ContextMenu] = ...
    TextureViewer_InputThumbnail: ClassVar[importlib._bootstrap.ContextMenu] = ...
    TextureViewer_OutputThumbnail: ClassVar[importlib._bootstrap.ContextMenu] = ...
    TextureViewer_Thumbnail: ClassVar[importlib._bootstrap.ContextMenu] = ...
    Unknown: ClassVar[importlib._bootstrap.ContextMenu] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class DebugMessageView(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Widget(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class DiagnosticLogView(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Widget(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class DialogButton(enum.IntFlag):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Abort: ClassVar[importlib._bootstrap.DialogButton] = ...
    Apply: ClassVar[importlib._bootstrap.DialogButton] = ...
    Cancel: ClassVar[importlib._bootstrap.DialogButton] = ...
    Close: ClassVar[importlib._bootstrap.DialogButton] = ...
    Discard: ClassVar[importlib._bootstrap.DialogButton] = ...
    Help: ClassVar[importlib._bootstrap.DialogButton] = ...
    Ignore: ClassVar[importlib._bootstrap.DialogButton] = ...
    No: ClassVar[importlib._bootstrap.DialogButton] = ...
    NoToAll: ClassVar[importlib._bootstrap.DialogButton] = ...
    OK: ClassVar[importlib._bootstrap.DialogButton] = ...
    Open: ClassVar[importlib._bootstrap.DialogButton] = ...
    Reset: ClassVar[importlib._bootstrap.DialogButton] = ...
    RestoreDefaults: ClassVar[importlib._bootstrap.DialogButton] = ...
    Retry: ClassVar[importlib._bootstrap.DialogButton] = ...
    Save: ClassVar[importlib._bootstrap.DialogButton] = ...
    SaveAll: ClassVar[importlib._bootstrap.DialogButton] = ...
    Yes: ClassVar[importlib._bootstrap.DialogButton] = ...
    YesToAll: ClassVar[importlib._bootstrap.DialogButton] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class DockReference(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    AddTo: ClassVar[importlib._bootstrap.DockReference] = ...
    BottomOf: ClassVar[importlib._bootstrap.DockReference] = ...
    BottomWindowSide: ClassVar[importlib._bootstrap.DockReference] = ...
    EmptySpace: ClassVar[importlib._bootstrap.DockReference] = ...
    LastUsedArea: ClassVar[importlib._bootstrap.DockReference] = ...
    LeftOf: ClassVar[importlib._bootstrap.DockReference] = ...
    LeftToolArea: ClassVar[importlib._bootstrap.DockReference] = ...
    LeftWindowSide: ClassVar[importlib._bootstrap.DockReference] = ...
    MainToolArea: ClassVar[importlib._bootstrap.DockReference] = ...
    NewFloatingArea: ClassVar[importlib._bootstrap.DockReference] = ...
    NoArea: ClassVar[importlib._bootstrap.DockReference] = ...
    RightOf: ClassVar[importlib._bootstrap.DockReference] = ...
    RightWindowSide: ClassVar[importlib._bootstrap.DockReference] = ...
    TopOf: ClassVar[importlib._bootstrap.DockReference] = ...
    TopWindowSide: ClassVar[importlib._bootstrap.DockReference] = ...
    TransientPopupArea: ClassVar[importlib._bootstrap.DockReference] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class EventBookmark(SwigPyObject):
    eventId: Any
    text: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class EventBrowser(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def GetAPIEventForEID(self, eventId) -> Any: ...
    def GetActionForEID(self, eventId) -> Any: ...
    def GetCurrentFilterText(self) -> Any: ...
    def GetEventName(self, eventId) -> Any: ...
    def IsAPIEventVisible(self, eventId) -> Any: ...
    def RegisterEventFilterFunction(self, name, description, filter, parser, completer) -> Any: ...
    def SetCurrentFilterText(self, text) -> Any: ...
    def SetEmptyRegionsVisible(self, show) -> Any: ...
    def SetShowAllParameters(self, show) -> Any: ...
    def SetShowParameterNames(self, show) -> Any: ...
    def SetUseCustomActionNames(self, use) -> Any: ...
    def UnregisterEventFilterFunction(self, name) -> Any: ...
    def UpdateDurationColumn(self) -> Any: ...
    def Widget(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ExtensionManager(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def ErrorDialog(self, text, title) -> Any: ...
    @overload
    def ErrorDialog(text) -> Any: ...
    def GetInstalledExtensions(self) -> Any: ...
    def GetMiniQtHelper(self) -> Any: ...
    def IsExtensionLoaded(self, name) -> Any: ...
    def LoadExtension(self, name) -> Any: ...
    @overload
    def MessageDialog(self, text, title) -> Any: ...
    @overload
    def MessageDialog(text) -> Any: ...
    @overload
    def OpenDirectoryName(self, caption, dir) -> Any: ...
    @overload
    def OpenDirectoryName(caption) -> Any: ...
    @overload
    def OpenDirectoryName() -> Any: ...
    @overload
    def OpenFileName(self, caption, dir, filter) -> Any: ...
    @overload
    def OpenFileName(caption, dir) -> Any: ...
    @overload
    def OpenFileName(caption) -> Any: ...
    @overload
    def OpenFileName() -> Any: ...
    @overload
    def QuestionDialog(self, text, options, title) -> Any: ...
    @overload
    def QuestionDialog(text, options) -> Any: ...
    def RegisterContextMenu(self, base, submenus, callback) -> Any: ...
    def RegisterPanelMenu(self, base, submenus, callback) -> Any: ...
    def RegisterWindowMenu(self, base, submenus, callback) -> Any: ...
    @overload
    def SaveFileName(self, caption, dir, filter) -> Any: ...
    @overload
    def SaveFileName(caption, dir) -> Any: ...
    @overload
    def SaveFileName(caption) -> Any: ...
    @overload
    def SaveFileName() -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ExtensionMetadata(SwigPyObject):
    author: Any
    description: Any
    extensionAPI: Any
    extensionURL: Any
    filePath: Any
    name: Any
    package: Any
    this: Any
    thisown: Any
    version: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class FollowType(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    OutputColor: ClassVar[importlib._bootstrap.FollowType] = ...
    OutputDepth: ClassVar[importlib._bootstrap.FollowType] = ...
    OutputDepthResolve: ClassVar[importlib._bootstrap.FollowType] = ...
    ReadOnly: ClassVar[importlib._bootstrap.FollowType] = ...
    ReadWrite: ClassVar[importlib._bootstrap.FollowType] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class MainWindow(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def BringToFront(self) -> Any: ...
    def RegisterShortcut(self, shortcut, widget, callback) -> Any: ...
    def UnregisterShortcut(self, shortcut, widget) -> Any: ...
    def Widget(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class MiniQtHelper(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def AddGridWidget(self, parent, row, column, child, rowSpan, columnSpan) -> Any: ...
    def AddWidget(self, parent, child) -> Any: ...
    def ClearContainedWidgets(self, parent) -> Any: ...
    def CloseCurrentDialog(self, success) -> Any: ...
    def CloseToplevelWidget(self, widget) -> Any: ...
    def CreateButton(self, pressed) -> Any: ...
    def CreateCheckbox(self, changed) -> Any: ...
    def CreateComboBox(self, editable, changed) -> Any: ...
    def CreateGridContainer(self) -> Any: ...
    def CreateGroupBox(self, collapsible) -> Any: ...
    def CreateHorizontalContainer(self) -> Any: ...
    def CreateLabel(self) -> Any: ...
    def CreateOutputRenderingWidget(self) -> Any: ...
    def CreateProgressBar(self, horizontal) -> Any: ...
    def CreateRadiobox(self, changed) -> Any: ...
    def CreateSpacer(self, horizontal) -> Any: ...
    def CreateSpinbox(self, decimalPlaces, step) -> Any: ...
    def CreateTextBox(self, singleLine, changed) -> Any: ...
    def CreateToplevelWidget(self, windowTitle, closed) -> Any: ...
    def CreateVerticalContainer(self) -> Any: ...
    def DestroyWidget(self, widget) -> Any: ...
    def FindChildByName(self, parent, name) -> Any: ...
    def GetChild(self, parent, index) -> Any: ...
    def GetComboCount(self, combo) -> Any: ...
    def GetNumChildren(self, widget) -> Any: ...
    def GetParent(self, widget) -> Any: ...
    def GetProgressBarMaximum(self, pbar) -> Any: ...
    def GetProgressBarMinimum(self, pbar) -> Any: ...
    def GetProgressBarValue(self, pbar) -> Any: ...
    def GetSpinboxValue(self, spinbox) -> Any: ...
    def GetWidgetName(self, widget) -> Any: ...
    def GetWidgetText(self, widget) -> Any: ...
    def GetWidgetType(self, widget) -> Any: ...
    def GetWidgetWindowingData(self, widget) -> Any: ...
    def InsertWidget(self, parent, index, child) -> Any: ...
    def InvokeOntoUIThread(self, callback) -> Any: ...
    def IsWidgetChecked(self, checkableWidget) -> Any: ...
    def IsWidgetEnabled(self, widget) -> Any: ...
    def IsWidgetVisible(self, widget) -> Any: ...
    def ResetProgressBar(self, pbar) -> Any: ...
    def SelectComboOption(self, combo, option) -> Any: ...
    def SetComboOptions(self, combo, options) -> Any: ...
    def SetLabelImage(self, widget, data, width, height, alpha) -> Any: ...
    def SetProgressBarRange(self, pbar, minimum, maximum) -> Any: ...
    def SetProgressBarValue(self, pbar, value) -> Any: ...
    def SetSpinboxBounds(self, spinbox, minVal, maxVal) -> Any: ...
    def SetSpinboxValue(self, spinbox, value) -> Any: ...
    def SetWidgetBackgroundColor(self, widget, red, green, blue) -> Any: ...
    def SetWidgetChecked(self, checkableWidget, checked) -> Any: ...
    def SetWidgetEnabled(self, widget, enabled) -> Any: ...
    def SetWidgetFont(self, widget, font, fontSize, bold, italic) -> Any: ...
    def SetWidgetName(self, widget, name) -> Any: ...
    def SetWidgetReplayOutput(self, widget, output) -> Any: ...
    def SetWidgetText(self, widget, text) -> Any: ...
    def SetWidgetVisible(self, widget, visible) -> Any: ...
    def ShowWidgetAsDialog(self, widget) -> Any: ...
    def UpdateProgressBarValue(self, pbar, delta) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class PanelMenu(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    BufferViewer: ClassVar[importlib._bootstrap.PanelMenu] = ...
    EventBrowser: ClassVar[importlib._bootstrap.PanelMenu] = ...
    MeshPreview: ClassVar[importlib._bootstrap.PanelMenu] = ...
    PipelineStateViewer: ClassVar[importlib._bootstrap.PanelMenu] = ...
    TextureViewer: ClassVar[importlib._bootstrap.PanelMenu] = ...
    Unknown: ClassVar[importlib._bootstrap.PanelMenu] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class PerformanceCounterViewer(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def UpdateDurationColumn(self) -> Any: ...
    def Widget(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class PersistantConfig(SwigPyObject):
    AllowGlobalHook: Any
    AllowProcessInject: Any
    AlwaysLoad_Extensions: Any
    AlwaysReplayLocally: Any
    Analytics_ManualCheck: Any
    Analytics_TotalOptOut: Any
    BufferFormatter_SavedFormats: Any
    CheckUpdate_AllowChecks: Any
    CheckUpdate_CurrentVersion: Any
    CheckUpdate_LastUpdate: Any
    CheckUpdate_UpdateAvailable: Any
    CheckUpdate_UpdateResponse: Any
    Comments_ShowOnLoad: Any
    CrashReport_EmailAddress: Any
    CrashReport_EmailNagged: Any
    CrashReport_LastOpenedCapture: Any
    CrashReport_ReportedBugs: Any
    CrashReport_ShouldRememberEmail: Any
    DefaultCaptureSaveDirectory: Any
    DefaultReplayOptions: Any
    DegradedCapture_LastUpdate: Any
    EventBrowser_AddFake: Any
    EventBrowser_ApplyColors: Any
    EventBrowser_ColorEventRow: Any
    EventBrowser_TimeUnit: Any
    ExternalTool_RadeonGPUProfiler: Any
    Font_Family: Any
    Font_GlobalScale: Any
    Font_MonoFamily: Any
    Font_PreferMonospaced: Any
    Formatter_MaxFigures: Any
    Formatter_MinFigures: Any
    Formatter_NegExp: Any
    Formatter_PosExp: Any
    LastCaptureExe: Any
    LastCaptureFilePath: Any
    LastCapturePath: Any
    LastFileBrowsePath: Any
    LocalProxyAPI: Any
    RecentCaptureFiles: Any
    RecentCaptureSettings: Any
    ShaderProcessors: Any
    TemporaryCaptureDirectory: Any
    TextureViewer_PerTexSettings: Any
    TextureViewer_PerTexYFlip: Any
    TextureViewer_ResetRange: Any
    TextureViewer_ShaderDirs: Any
    Tips_HasSeenFirst: Any
    UIStyle: Any
    UnsupportedAndroid_LastUpdate: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def AddRemoteHost(self, host) -> Any: ...
    def Close(self) -> Any: ...
    def GetRemoteHost(self, hostname) -> Any: ...
    def GetRemoteHosts(self) -> Any: ...
    def Load(self, filename) -> Any: ...
    def RemoveRemoteHost(self, host) -> Any: ...
    def Save(self) -> Any: ...
    def SetStyle(self) -> Any: ...
    def SetupFormatting(self) -> Any: ...
    def UpdateEnumeratedProtocolDevices(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class PipelineStage(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Blending: ClassVar[importlib._bootstrap.PipelineStage] = ...
    ColorDepthOutput: ClassVar[importlib._bootstrap.PipelineStage] = ...
    ComputeShader: ClassVar[importlib._bootstrap.PipelineStage] = ...
    DepthTest: ClassVar[importlib._bootstrap.PipelineStage] = ...
    DomainShader: ClassVar[importlib._bootstrap.PipelineStage] = ...
    FragmentShader: ClassVar[importlib._bootstrap.PipelineStage] = ...
    GeometryShader: ClassVar[importlib._bootstrap.PipelineStage] = ...
    HullShader: ClassVar[importlib._bootstrap.PipelineStage] = ...
    PixelShader: ClassVar[importlib._bootstrap.PipelineStage] = ...
    Rasterizer: ClassVar[importlib._bootstrap.PipelineStage] = ...
    SampleMask: ClassVar[importlib._bootstrap.PipelineStage] = ...
    StencilTest: ClassVar[importlib._bootstrap.PipelineStage] = ...
    TessControlShader: ClassVar[importlib._bootstrap.PipelineStage] = ...
    TessEvalShader: ClassVar[importlib._bootstrap.PipelineStage] = ...
    VertexInput: ClassVar[importlib._bootstrap.PipelineStage] = ...
    VertexShader: ClassVar[importlib._bootstrap.PipelineStage] = ...
    ViewportsScissors: ClassVar[importlib._bootstrap.PipelineStage] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class PipelineStateViewer(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def SaveShaderFile(self, shader) -> Any: ...
    def SelectPipelineStage(self, stage) -> Any: ...
    def Widget(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class PixelHistoryView(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def SetHistory(self, history) -> Any: ...
    def Widget(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class PythonShell(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def GetScriptText(self) -> Any: ...
    def LoadScriptFromFilename(self, filename) -> Any: ...
    def RunScript(self) -> Any: ...
    def SetScriptText(self, script) -> Any: ...
    def Widget(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class RGPInterop(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def HasRGPEvent(self, eventId) -> Any: ...
    def SelectRGPEvent(self, eventId) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class RemoteHost(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def CheckStatus(self) -> Any: ...
    def Connect(self, server) -> Any: ...
    def FriendlyName(self) -> Any: ...
    def Hostname(self) -> Any: ...
    def IsBusy(self) -> Any: ...
    def IsConnected(self) -> Any: ...
    def IsLocalhost(self) -> Any: ...
    def IsServerRunning(self) -> Any: ...
    def IsValid(self) -> Any: ...
    def IsVersionMismatch(self) -> Any: ...
    def LastCapturePath(self) -> Any: ...
    def Launch(self) -> Any: ...
    def Name(self) -> Any: ...
    def Protocol(self) -> Any: ...
    def RunCommand(self) -> Any: ...
    def SetLastCapturePath(self, path) -> Any: ...
    def SetRunCommand(self, cmd) -> Any: ...
    def VersionMismatchError(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ReplayManager(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def AsyncInvoke(self, tag, method) -> Any: ...
    @overload
    def AsyncInvoke(method) -> Any: ...
    def BlockInvoke(self, m) -> Any: ...
    def CancelReplayLoop(self) -> Any: ...
    def ConnectToRemoteServer(self, host) -> Any: ...
    def CopyCaptureFromRemote(self, remotepath, localpath, window) -> Any: ...
    def CopyCaptureToRemote(self, localpath, window) -> Any: ...
    def CurrentRemote(self) -> Any: ...
    def DeleteCapture(self, capturefile, local) -> Any: ...
    def DisconnectFromRemoteServer(self) -> Any: ...
    def ExecuteAndInject(self, exe, workingDir, cmdLine, env, capturefile, opts) -> Any: ...
    def GetCaptureAccess(self) -> Any: ...
    def GetCurrentProcessingTime(self) -> Any: ...
    def GetHomeFolder(self, synchronous, callback) -> Any: ...
    def GetRemoteSupport(self) -> Any: ...
    def ListFolder(self, path, synchronous, callback) -> Any: ...
    def PingRemote(self) -> Any: ...
    def ShutdownServer(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ResourceInspector(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def CurrentResource(self) -> Any: ...
    def Inspect(self, id) -> Any: ...
    def RevealParameter(self, param) -> Any: ...
    def Widget(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderMessageViewer(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def GetEvent(self) -> Any: ...
    def GetShaderMessages(self) -> Any: ...
    def IsOutOfDate(self) -> Any: ...
    def Widget(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderProcessingTool(SwigPyObject):
    args: Any
    executable: Any
    input: Any
    name: Any
    output: Any
    this: Any
    thisown: Any
    tool: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def CompileShader(self, window, source, entryPoint, stage, args) -> Any: ...
    def DefaultArguments(self) -> Any: ...
    def DisassembleShader(self, window, shader, args) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderToolOutput(SwigPyObject):
    log: Any
    result: Any
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class ShaderViewer(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def AddWatch(self, expression) -> Any: ...
    def CurrentStep(self) -> Any: ...
    def GetCurrentFileContents(self) -> Any: ...
    def RunForward(self) -> Any: ...
    def SetCurrentStep(self, step) -> Any: ...
    def ShowErrors(self, errors) -> Any: ...
    def ToggleBreakpointOnDisassemblyLine(self, disassemblyLine) -> Any: ...
    @overload
    def ToggleBreakpointOnInstruction(self, instruction = ...) -> Any: ...
    @overload
    def ToggleBreakpointOnInstruction() -> Any: ...
    def Widget(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class StatisticsViewer(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Widget(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class TextureViewer(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def GetChannelVisibilityBits(self) -> Any: ...
    def GetCurrentResource(self) -> Any: ...
    def GetHistogramRange(self) -> Any: ...
    def GetPickedLocation(self) -> Any: ...
    def GetSelectedSubresource(self) -> Any: ...
    def GetTextureOverlay(self) -> Any: ...
    def GetZoomLevel(self) -> Any: ...
    def GotoLocation(self, x, y) -> Any: ...
    def IsZoomAutoFit(self) -> Any: ...
    def SetChannelVisibility(self, red, green, blue, alpha) -> Any: ...
    def SetHistogramRange(self, blackpoint, whitepoint) -> Any: ...
    def SetSelectedSubresource(self, sub) -> Any: ...
    def SetTextureOverlay(self, overlay) -> Any: ...
    def SetZoomLevel(self, autofit, zoom) -> Any: ...
    def ViewFollowedResource(self, followType, stage, index, arrayElement) -> Any: ...
    def ViewTexture(self, resourceId, typeCast, focus) -> Any: ...
    def Widget(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class TimeUnit(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    Count: ClassVar[importlib._bootstrap.TimeUnit] = ...
    Microseconds: ClassVar[importlib._bootstrap.TimeUnit] = ...
    Milliseconds: ClassVar[importlib._bootstrap.TimeUnit] = ...
    Nanoseconds: ClassVar[importlib._bootstrap.TimeUnit] = ...
    Seconds: ClassVar[importlib._bootstrap.TimeUnit] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class TimelineBar(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def HighlightHistory(self, id, history) -> Any: ...
    def HighlightResourceUsage(self, id) -> Any: ...
    def Widget(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class WindowMenu(enum.IntEnum):
    class _member_type_:
        denominator: Any
        imag: Any
        numerator: Any
        real: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_length(self) -> int: ...
        @overload
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    File: ClassVar[importlib._bootstrap.WindowMenu] = ...
    Help: ClassVar[importlib._bootstrap.WindowMenu] = ...
    NewMenu: ClassVar[importlib._bootstrap.WindowMenu] = ...
    Tools: ClassVar[importlib._bootstrap.WindowMenu] = ...
    Unknown: ClassVar[importlib._bootstrap.WindowMenu] = ...
    Window: ClassVar[importlib._bootstrap.WindowMenu] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[collections.OrderedDict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class rdcarray_of_BugReport(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_DialogButton(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_EventBookmark(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_ExtensionMetadata(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_RemoteHost(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_ShaderProcessingTool(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_ptr_ICaptureViewer(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class rdcarray_of_rdcstrpair(SwigPyObject):
    this: Any
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def clear(self) -> Any: ...
    def copy(self) -> Any: ...
    def count(self, item) -> Any: ...
    def extend(self, items) -> Any: ...
    def fill(self, count, el) -> Any: ...
    def index(self, item, start = ..., end = ...) -> Any: ...
    def insert(self, index, value) -> Any: ...
    def pop(self, index = ...) -> Any: ...
    def pop_back(self) -> Any: ...
    def remove(self, item) -> Any: ...
    def removeIf(self, predicate) -> Any: ...
    def removeOneIf(self, predicate) -> Any: ...
    def resize_for_index(self, s) -> Any: ...
    def reverse(self) -> Any: ...
    def sort(self, key = ..., reverse = ...) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

def AddRecentFile(recentList, file) -> Any: ...
def ConfigFilePath(filename) -> Any: ...
def RemoveRecentFile(recentList, file) -> Any: ...
def SWIG_PyInstanceMethod_New(*args, **kwargs) -> Any: ...
def UnitSuffix(unit) -> Any: ...
